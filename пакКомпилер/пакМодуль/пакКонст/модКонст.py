"""
Содержит тип для обработки констант.
"""
if True:
   from пакКомпилер.пакТег import тТег

class тКонст:
   def __init__(self, root, теги):
      self.__root = root
      assert type(теги) == dict, "В секцию CONST должен передаваться словарь тегов, type="+type(теги)
      self.__теги = теги # Все теги, чо передаются сюда
      self.__консттеги = {} # Теги содержащие константы
      self.__бКонст = False # Признак наличия констант
      self.__бКонстОдин = False # Признак того, что в этом пространстве секций констант больше нет
      self.__тег_конец = None # где заканчивается секция констант
      self.__конст = {} # Содержит словарь констант
      self.__цКонст = 0 # Сколько всего констант
      self.ошибка = root.ошибка

   @property
   def теги(self):
      return self.__теги

   def ЕслиКонстанты(self):
      """
      Первый тег в списке тегов должен быть CONST.
      Если нет -- значит в исходнике нет констант.
      """
      тег = self.__теги[0]
      if тег.имя =='CONST':
         # укоротить теги
         теги = {}
         for счёт in range(1, len(self.__теги)):
            тег = self.__теги[счёт]
            тег._Номер_Уст(счёт-1)
            теги[счёт-1] = тег
         self.__теги = {}
         self.__теги = теги
         бВыход = True
      else:
         бВыход = False
      self.__бКонст = бВыход
      return бВыход

   def ЕслиКонстПусто(self):
      """
      Может быть следующий тег:   ; TYPE VAR PROCEDURE BEGIN (* END модуля уже отброшено *)
      Секция CONST может быть пустой, но если есть константы, они должны заканчиваться на ;
      """
      тег = self.__теги[0] # первый тег после CONST, а сам CONST уже распознан и отброшен
      assert type(тег) == тТег, "Тег должен быть тТег, type="+type(тег)
      # проверим на внезапный конец секции
      маркер = (тег.имя == "TYPE") or (тег.имя == "VAR") or (тег.имя == "PROCEDURE") or (тег.имя == "BEGIN")
      бПусто = True
      if маркер: # секция импорта пустая
         self.__бКонст = False
      else:
         бПусто = False
      return бПусто

   def ЕслиКонстОграничен(self):
      """
      Ищет разделитель окончания констант.
      Сканируем теги все подряд.
      Может быть следующий тег-маркер окончаня: TYPE VAR PROCEDURE BEGIN
      Первый тег всегда должен быть именем константы и не может быть маркером
      Произвольный тег может быть ";" и не может быть маркером
      """
      тег_всего = len(self.__теги)-1
      тег_счёт = 0 # первый тег после CONST, а сам CONST уже распознали и отбросили
      тег = self.__теги[тег_счёт]
      маркер = (тег.имя == "TYPE") or \
               (тег.имя == "VAR") or \
               (тег.имя == "PROCEDURE") or \
               (тег.имя == "BEGIN")
      # ищем имя константы
      while (not маркер) and (тег_счёт < тег_всего):
         тег_счёт += 1
         тег = self.__теги[тег_счёт]
         assert type(тег) == тТег, "Тег должен быть тТег, type="+type(тег)
         маркер = (тег.имя == "TYPE") or \
               (тег.имя == "VAR") or \
               (тег.имя == "PROCEDURE") or \
               (тег.имя == "BEGIN")
      тег_счёт -= 1
      тег = self.__теги[тег_счёт]
      self.__тег_конец = тег
      if тег.имя != ";":
         # Константы -- могут занимать весь модуль, без других секций
         self.ошибка.Печать("Тег должен быть ';', тег="+тег.имя)

   def Теги_Получить(self):
      """
      Выбирает теги по секции констант.
      Дальше работает только с ними.
      """
      теги = {}  # будущий словарь тегов
      for счёт_конст in range(0, self.__тег_конец.номер+1): # CONST уже отброшено
         тег = self.__теги[счёт_конст]
         тег._Номер_Уст(счёт_конст)
         #print("#", счёт_конст, "num",тег.номер, тег.имя)
         теги[счёт_конст] = тег
      self.__консттеги = теги

      теги = {}  # будущий словарь тегов
      счёт = 0
      for счёт_импорт in range(self.__тег_конец.номер+1, len(self.__теги)): # Пропускаем IMPORT
         тег = self.__теги[счёт_импорт]
         тег._Номер_Уст(счёт)
         #print("+",счёт_импорт, тег.номер, тег.имя)
         теги[счёт] = тег
         счёт += 1
      self.__теги = {}
      self.__теги = теги

   def Константы_Разбить(self):
      """
      У нас уже есть словарь констант. Теперь их надо разбить на части.
      Тег 1 -- имя
      Тег 2 -- =
      Тег N -- ;
      """
      #print("keys=", self.__консттеги.keys())
      #for i in self.__консттеги:
      #   print(i, self.__консттеги[i])
      счёт_конст = 0 # Счётчик констант
      счёт = 0
      while счёт < len(self.__консттеги)-1:
         #print(счёт, len(self.__консттеги))
         тег = self.__консттеги[счёт] # Должно быть имя константы
         if (not тег.ЕслиИмя()):
            #print(тег.имя, " номер", тег.номер)
            self.ошибка.Коорд("Неправильное имя константы", тег.коорд, тег.стр)
         else:
            конст = {}
            конст["tag"] = тег
            конст["exp"] = {}
            счёт += 1
            тег = self.__консттеги[счёт] # Должно быть "=" или "*"
            # проверим на экспорт
            if тег.имя == "*":
               конст["export"] = "True"
               счёт += 1
               тег = self.__консттеги[счёт] # Должно быть новое имя
            elif тег.имя == "=":
               конст["export"] = "False"
            else:
               self.ошибка.Коорд("Ошибка в присвоении константы", тег.коорд, тег.стр)

            # проверим на присвоение
            if тег.имя != "=":
               self.ошибка.Коорд("Неправильное присвоение константы", тег.коорд, тег.стр)
            else: # всё правильно, заполняем словарь константы
               счёт += 1
               тег = self.__консттеги[счёт] # Должно быть что-то
               счёт_выраж = 0
               while тег.имя != ";" and счёт < len(self.__консттеги)-1:
                  конст["exp"][счёт_выраж] = тег
                  счёт_выраж += 1
                  счёт += 1
                  тег = self.__консттеги[счёт] # Должно быть новое имя
               self.__конст[счёт_конст] = конст
               счёт_конст += 1
               счёт += 1
      if тег.имя != ";":
         assert тег.имя == ";", "Неправильно закончился разбор констант, тег(;)="+тег.имя

   def Теги_Печать(self):
      print("\nтКонст.Теги_Печать()")
      for keys in self.__теги:
         тег = self.__теги[keys]
         print(тег)

   def Конст_Печать(self):
      print("\nтКонст.Конст_Печать()")
      for keys in self.__консттеги:
         тег = self.__консттеги[keys]
         print(keys, тег)

   def КонсСлов_Печать(self):
      """
      Печатает словари констант
      """
      for i in self.__конст:
         конст = self.__конст[i]
         имя = конст['tag'].имя
         print(i, имя, "Экспорт=",конст['export'], конст['tag'].коорд)
         стр = ""
         выраж = конст["exp"]
         for i1 in выраж:
            стр = стр + " " + выраж[i1].имя
         print("      ", стр)

   def Обработать(self):
      """
      Проводит разбор секции CONST.
      """
      if self.ЕслиКонстанты():
         print("Есть секция констант!")
         if self.ЕслиКонстПусто():
            print("Секция констант пустая!")
         else:
            print("Секция констант не пустая!")
            #self.Теги_Печать()
            self.ЕслиКонстОграничен()
            #self.Теги_Печать()
            self.Теги_Получить()
            #self.Конст_Печать()
            self.Константы_Разбить()
            #self.КонсСлов_Печать()
      else:
         print("Нет секции констант!")
