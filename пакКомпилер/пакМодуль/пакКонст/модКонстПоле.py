# coding:utf8
"""
Содержит тип для разбора констант.
"""

if True:
	from пакКомпилер.пакСлово import тСлово

class тКонстПоле:
	def __init__(сам, пСекция):
		сам.__секция = пСекция
		сам.__бЭкспорт = False
		сам.__выраж = {} # Выражение для вычисления константы
		сам.__Имя_Проверить()
		сам.__Экспорт_Проверить()
		сам.__Проверить_Равно()
		сам.__Выраж_Заполнить()

	def __Имя_Проверить(сам):
		"""
		Выясняет правильность имени константы.
		"""
		имя = сам.__Слово_Проверить()
		слово_имя = сам.__секция.слова_секции[0]
		if слово_имя.ЕслиИмя_Строго():
			сам.__имя = имя
			сам.__СловаСекции_Обрезать()
		else:
			assert слово_имя.ЕслиИмя(), "тКонстПоле: имя поля должно быть допустимым именем, имя=" + имя + слово_имя.стрИсх

	def __Экспорт_Проверить(сам):
		"""
		Проверяет является ли константа экспортируемой.
		"""
		строка_экспорт = сам.__Слово_Проверить()
		слово_экспорт = сам.__секция.слова_секции[0]
		if слово_экспорт.род == тСлово.кУмножить: # есть экспорт
			сам.__бЭкспорт = True
			сам.__СловаСекции_Обрезать()
		elif слово_экспорт.род == тСлово.кРавно:
			pass # это определение константы, дальше присвоение
		else:
			assert False, "тКонстПоле: Символ экспорта допустим '*' или '=',    строка=" + строка_экспорт + слово_экспорт.стрИсх

	def __Проверить_Равно(сам):
		"""
		Проверяет литеру равно в константах.
		"""
		строка_равно = сам.__Слово_Проверить()
		слово_равно = сам.__секция.слова_секции[0]
		if слово_равно.род == тСлово.кРавно: # есть уравнивание
			сам.__СловаСекции_Обрезать()
		else:
			assert False, "тКонстПоле: Символ приравнивания допустим '=',    строка=" + строка_равно + слово_равно.стрИсх

	def __Выраж_Заполнить(сам):
		"""
		Пока не встретится ";" -- заполнять выражение
		"""
		строка_равно = сам.__Слово_Проверить()
		слово_равно = сам.__секция.слова_секции[0]
		while not (слово_равно.род == тСлово.кТочкаЗапятая):
			сам.__СловаСекции_Обрезать()
			сам.__выраж[len(сам.__выраж)] = строка_равно
			строка_равно = сам.__Слово_Проверить()
			слово_равно = сам.__секция.слова_секции[0]
		сам.__СловаСекции_Обрезать() # Откидываем завершающий разделитель

	def __Слово_Проверить(сам):
		"""
		Проверяет первое слово в словаре слов секции на допустимость.
		"""
		слово = сам.__секция.слова_секции[0]
		assert type(слово) == тСлово, "тКонстПоле: слово должно быть тСлово, тип="+str(type(слово))
		строка = слово.строка
		assert type(строка) == str, "тКонстПоле: строка должна быть 'str', type=" + str(type(строка))
		assert строка != "", "тКонстПоле: строка не может быть пустой"
		return строка

	def __СловаСекции_Обрезать(сам):
		"""
		Уменьшает слова секции на 1 с головы.
		"""
		новый_список = {}
		for ключ in range(1, len(сам.__секция.слова_секции)):
			новый_список[ключ-1]=сам.__секция.слова_секции[ключ]
		сам.__секция.слова_секции = {}
		сам.__секция.слова_секции = новый_список
