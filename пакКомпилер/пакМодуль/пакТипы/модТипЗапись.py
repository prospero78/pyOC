# coding:utf8
"""
Модуль описывает тип-запись.
"""

if True:
	from пакКомпилер.пакСлово import тСлово
	from пакКомпилер.пакМодуль.пакТипы.модРод import тРод
	from пакКомпилер.пакМодуль.пакПоле.модПоле import тПоле

class тТипЗапись:
	def __init__(сам, пДанные):
		сам.секция = пДанные['секция']
		сам.слова_секции = пДанные['слова']
		сам.поля = {} # все поля внутри записи
		сам.__Запись_Проверить()
		сам.__Поля_Проверить()
		сам.__Конец_Обрезать()

	def __Запись_Проверить(сам):
		"""
		Проверяет заголовок записи.
		Если есть предок -- заполняет предка.
		"""
		def СловоЗапись_Проверить():
			слово_запись = сам.слова_секции[0]
			строка_запись = слово_запись.Проверить()
			if строка_запись != "RECORD":
				assert False, "тТипЗапись: пропущено ключевое слово RECORD?"+слово_запись.стрИсх
			сам.СловаСекции_Обрезать()

		def СкобкаЛевая_Обрезать():
			"""
			В этой позиции может быть скобка, а может и нет. Надо проверять.
			"""
			бРезультат = False
			слово_скобка = сам.слова_секции[0]
			строка_скобка = слово_скобка.Проверить()
			if строка_скобка == "(":
				бРезультат = True
				сам.СловаСекции_Обрезать()
			return бРезультат
		def СкобкаПрав_Обрезать():
				слово_скобка = сам.слова_секции[0]
				строка_скобка = слово_скобка.Проверить()
				if строка_скобка != ")": # закрытие имени предка
					assert False, "тТипЗапись: пропущена закрывающая скобка предка?"+слово_скобка.стрИсх
				сам.СловаСекции_Обрезать()
		СловоЗапись_Проверить()
		if СкобкаЛевая_Обрезать():
			сам.секция.Предок_Проверить()
			СкобкаПрав_Обрезать()

	def __Поля_Проверить(сам):
		"""
		В записях ВСЕГДА встречается окончание "END" даже без
		вложенных полей.
		Если вложенных полей нет -- значит разбор полей не вызываем.
		Поэтому здесь проверяем в цикле все поля, пока не закончатся
		Внутри типа-записи могут быть поля-записи.
		Если до END встречается RECORD -- значит счётчик END надо увеличивать.
		"""
		слово_конец = сам.слова_секции[1]
		строка_конец = слово_конец.Проверить()
		if not (строка_конец != "END"): # если запись не пустая
			слово_конец = сам.слова_секции[0]
			print("модТипЗапись стр.67, слово конец:", слово_конец.стрИсх)
			строка_конец = слово_конец.Проверить()
			# если типы не встроенные (у встроенных типов нет полей)
			цСчётКонец = 1
			цСчётСлово = 1
			while цСчётКонец > 0: # нет окончания описания типа
				парам = {}
				парам['секция'] = сам
				парам['слова']  = сам.слова_секции
				print("test")
				сам.поля[len(сам.поля)] = тПоле(парам)
				слово_конец = сам.слова_секции[цСчётСлово]
				строка_конец = слово_конец.Проверить()
				print("Стр.80", цСчётСлово, слово_конец)
				цСчётСлово += 1
				if строка_конец == "RECORD": # поле с записью
					цСчётКонец += 1
				elif строка_конец == "END": # закончилось либо поле, либо тип
					цСчётКонец -= 1
					assert  цСчётКонец < 0, "Сбой счётчика окончания тТипЗапись" +слово_конец.стрИсх
			сам.__слово_конец = слово_конец
		else:
			сам.__слово_конец = слово_конец
		print("модТипЗапись стр.91, слово конец:", сам.__слово_конец.стрИсх)

	def СловаСекции_Обрезать(сам):
		"""
		Уменьшает слова секции на 1 с головы.
		"""
		новый_список = {}
		for ключ in range(1, len(сам.слова_секции)):
			новый_список[ключ-1]=сам.слова_секции[ключ]
		сам.слова_секции = {}
		сам.слова_секции = новый_список

	def __Конец_Обрезать(сам):
		"""
		Здесь может встретиться только одно слово: "END".
		"""
		слово_конец = сам.слова_секции[0]
		строка_конец = слово_конец.Проверить()
		if строка_конец == "END": # есть окончание
			сам.СловаСекции_Обрезать()
		else:
			assert False, "Слово окончания типа должно быть 'END'" + слово_конец.стрИсх
