# coding:utf8
"""
Модуль описывает тип-запись.
"""

if True:
	from пакКомпилер.пакСлово import тСлово
	from пакКомпилер.пакМодуль.пакТипы.модРод import тРод
	from . модПоле import тПоле

class тТипЗапись:
	def __init__(сам, пТип):
		сам.тип = пТип
		сам.__запись_поля = {} # все поля внутри записи
		сам.__Запись_Проверить()
		
	def __Запись_Проверить(сам):
		"""
		Проверяет сложную структуру записи.
		Может иметь множество полей и вложенных записей.
		Запись уже проверена на имя, и слово[0] содержит "("
		"""
		def Предок_Получ():
				строка_предок = сам.тип.Слово_Проверить()
				сам.тип.Предок_Уст(строка_предок)
				сам.тип.СловаСекции_Обрезать()
		def СловоЗапись_Получить():
			строка_запись = сам.тип.Слово_Проверить()
			if строка_запись != "RECORD":
				assert False, "тТипЗапись: пропущено ключевое слово RECORD? строка=\""+строка_запись+"\""
			сам.тип.СловаСекции_Обрезать()
		def СкобкаЛевая_Обрезать():
			"""
			В этой позиции может быть скобка, а может и нет. Надо проверять.
			Это неправильный комментарий, надо переделать.
			"""
			строка_скобка = сам.тип.Слово_Проверить()
			if строка_скобка == "(":
				бРезультат = True
				сам.тип.СловаСекции_Обрезать()
			elif строка_скобка == "END":
				pass
			else:
				assert False, "тТипЗапись: неправильно завершена запись? строка=\""+строка_скобка+"\""
			return строка_скобка
		def СкобкаПрав_Обрезать():
				строка_скобка = сам.тип.Слово_Проверить()
				if строка_скобка != ")": # закрытие имени предка
					assert False, "тТипЗапись: пропущена закрывающая скобка предка? строка=\""+строка_скобка+"\""
				сам.тип.СловаСекции_Обрезать()
		СловоЗапись_Получить()
		строка_скобка = СкобкаЛевая_Обрезать()
		if строка_скобка == "(":
			Предок_Получ()
			СкобкаПрав_Обрезать()
			if not сам.тип.ЗаписьКонец_Обрезать(): # там идут поля
				поле = тПоле(сам)
				сам.__запись_поля[len(сам.__запись_поля)] = поле
		elif строка_скобка == "END":
			сам.тип.Предок_Уст(тРод.сБезПредка)
			сам.тип.СловаСекции_Обрезать()
			print("         ===Это пустая запись с предком===")
		# проверяем на разделитель. Если нет -- сложная запись.
		if not сам.тип.Разделитель_Обрезать():
			# это сложная запись с полями
			поле = тПоле(сам)
			сам.__запись_поля[len(сам.__запись_поля)] = поле
			# проверим на окончание записи
			if сам.тип.ЗаписьКонец_Обрезать(): # описание записи окончено
				сам.тип.СловаСекции_Обрезать()
				if not сам.тип.Разделитель_Обрезать():
					assert False, "тТипЗапись: конец описания типа не верный"
			elif сам.тип.слова_секции[0].строка == ";": # закончено поле записи
				сам.тип.Разделитель_Обрезать()
				# TODO: дальше может быть как "END", так и начало следующего поля или записи
			else: # это встроенная запись или поле (продолжается)
				print ("Окончание поля или записи: ", сам.тип.слова_секции[0].строка)
				строка_разд = сам.тип.слова_секции[0].строка
				if сам.тип.Разделитель_Обрезать():
					запись = тТипЗапись(сам.тип)
					сам.__запись_поля[len(сам.__запись_поля)] = запись
				else:
					assert False, "тТипЗапись: конец описания поля не верный, строка="+строка_разд
