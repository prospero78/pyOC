# coding: utf8
"""
Модуль определяет разбор секции типов.
"""

if True:
	from пакКомпилер.пакСлово import тСлово
	from .модТип import тТип

class тТипы:
	def __init__(сам, пКорень, пСлова):
		def Слова_Проверить():
			бУсл = type(пСлова) == dict
			стрОш = "В секцию типов должен передаваться словарь слов, type=" + str(type(пСлова))
			пКорень.конс.Проверить(бУсл, стрОш)

		сам.__корень = пКорень

		Слова_Проверить()
		сам.__слова_модуль = пСлова # все пСлова исходника

		сам.__слова_секции = {} #  Все пСлова секции TYPE

		сам.__типы = {} # словарь по словам каждого типа в модуле
		сам.__бТипыЕсть = False # По умлочанию секции TYPE нет
		сам.__бТипыНеПустые = False # По умолчанию секция TYPE пустая
		сам.__цТипТекущ = None
		сам.ошибка = пКорень.ошибка

	def __Слово_TYPE_Обрезать(сам):
		"""
		Первое слово в списке слов должно быть TYPE.
		Если нет -- значит в исходнике нет описания типов.
		Возвращает результат встречи с TYPE
		"""
		слово = сам.__слова_модуль[0]
		if слово.строка =='TYPE':
			# укоротить типы
			слова = {}
			for счёт in range(1, len(сам.__слова_модуль)):
				слово = сам.__слова_модуль[счёт]
				слово._Номер_Уст(счёт-1)
				слова[счёт-1] = слово
			сам.__слова_модуль = {}
			сам.__слова_модуль = слова
			сам.__бТипыЕсть = True
		return сам.__бТипыЕсть

	def __ЕслиТипыНеПустые(сам):
		"""
		Может быть следующее слово:   ; VAR PROCEDURE BEGIN (* END модуля уже отброшено *)
		Секция TYPE может быть пустой, но если есть типы, они должны заканчиваться на ;
		"""
		def Слово_Проверить():
			бУсл = (type(слово) == тСлово)
			стрОш = "Слово должно быть тСлово, type=" + str(type(слово))
			корень.конс.Проверить(бУсл, стрОш)
		корень = сам.__корень

		слово = сам.__слова_модуль[0] # первое слово после TYPE, а сам TYPE уже распознан и отброшен
		Слово_Проверить()

		# проверим на внезапный конец секции
		бМаркер = (слово.строка in ["VAR", "PROCEDURE", "BEGIN"])
		if not бМаркер: # секция типизации не пустая
			сам.__бТипыНеПустые = True
		return сам.__бТипыНеПустые

	def __ЕслиТипыОграничены(сам):
		"""
		Ищет разделитель окончания типов.
		Сканируем слова все подряд.
		Может быть следующее слово-маркер окончания секции типов: VAR PROCEDURE BEGIN,
		так как типов может быть несколько, то ";" не подходит
		Первое слово всегда должен быть именем типа и не может быть маркером
		Произвольное слово может быть ";" и не может быть маркером
		"""
		def Слово_Проверить():
			бУсл = type(слово) == тСлово
			стрОш = "тТипы: Слово должно быть тСлово, type=" + str(type(слово))
			корень.конс.Проверить(бУсл, стрОш)
		def Маркер():
			сам.__бМаркер = (слово.строка in ["VAR", "PROCEDURE", "BEGIN"])
		корень = сам.__корень
		цСловМодульВсего = len(сам.__слова_модуль) - 1 # отсчёт начинается с нуля
		цСловоСчёт = 0 # первый слово после TYPE, а сам TYPE уже распознали и отбросили
		слово = сам.__слова_модуль[цСловоСчёт]
		Слово_Проверить()
		Маркер()
		while (not сам.__бМаркер) and (цСловоСчёт < цСловМодульВсего ):
			цСловоСчёт += 1
			слово = сам.__слова_модуль[цСловоСчёт]

			Слово_Проверить()
			Маркер()
		цСловоСчёт -= 1
		слово = сам.__слова_модуль[цСловоСчёт]
		сам.__слово_конец = слово
		# Проверка на окончание секции типов
		if слово.строка != ";":
			сам.ошибка.Печать("тТипы: слово ограничение секции типов должно быть ';', слово= " + слово.строка)

	def __СловаСекции_Получить(сам):
		"""
		Выбирает слова по секции типов.
		Дальше работает только с ними.
		"""
		слова_секции = {}  # будущий словарь слов секции типов
		for цСчётТип in range(0, сам.__слово_конец.номер+1): # TYPE уже отброшено
			слово = сам.__слова_модуль[цСчётТип]
			слово._Номер_Уст(цСчётТип)
			#print("т+", цСчётТип, "num",слово.номер, слово.слово)
			слова_секции[цСчётТип] = слово
		сам.__слова_секции = слова_секции

		слова_модуля = {}  # будущий словарь слов модуля
		цСчётМодуль = 0
		for цСчёт in range(сам.__слово_конец.номер+1, len(сам.__слова_модуль)):
			слово = сам.__слова_модуль[цСчёт]
			слово._Номер_Уст(цСчётМодуль)
			#print("т-", цСчёт, слово.номер, слово.слово)
			слова_модуля[цСчётМодуль] = слово
			цСчётМодуль += 1
		сам.__слова_модуль = {}
		сам.__слова_модуль = слова_модуля

	def __Типы_Разделить(сам):
		"""
		Пока не исчерпаны слова секции -- последовательно вызываем новый тип.
		"""
		while len(сам.__слова_секции) > 0:
			print("Слов типов=", len(сам.__слова_секции))
			тип = None
			тип = тТип(сам.__корень, сам.__слова_секции)
			сам.__типы[len(сам.__типы)] = тип
			сам.__слова_секции = {}
			сам.__слова_секции = тип.слова_секции

	def СловаМодуля_Печать(сам):
		сам.__корень.конс.Печать("\nтТипы.СловаМодуля_Печать()")
		for ключ in сам.__слова_модуль:
			слово = сам.__слова_модуль[ключ]
			сам.__корень.конс.Печать(слово)

	def СловаСекции_Печать(сам):
		сам.__корень.конс.Печать("\nтТипы.СловаСекции_Печать()")
		for ключ in сам.__слова_секции:
			слово = сам.__слова_секции[ключ]
			сам.__корень.конс.Печать(ключ, слово)

	def Обработать(сам):
		"""
		Проводит разбор секции TYPE.
		"""
		if сам.__Слово_TYPE_Обрезать():
			сам.__корень.конс.Печать("Есть типы!")
		if сам.__ЕслиТипыНеПустые():
			сам.__корень.конс.Печать("Типы не пустые!")
			#сам.Теги_Печать()
			сам.__ЕслиТипыОграничены()
			#сам.Теги_Печать()
			сам.__СловаСекции_Получить()
			#сам.СловаСекции_Печать()
			#сам.Конст_Печать()
			сам.__Типы_Разделить()
		else:
			print("Нет типов!")
