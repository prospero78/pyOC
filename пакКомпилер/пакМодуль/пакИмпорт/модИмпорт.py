# coding: utf8
"""
Модуль "Импорт" содержит процедуры анализа возможного импорта модулей.
"""
if True:
	from пакКомпилер.пакСлово import тСлово
	from .модАлиас import тАлиас

class тИмпорт:
	def __init__(сам, пКорень, пСлова):
		def СловаСловарь_Проверить():
			бУсл = type(пСлова) == dict
			стрСообщ = "В секцию импорта должен передаваться словарь слов, type="+ str(type(пСлова))
			пКорень.конс.Проверить(бУсл, стрСообщ)
			assert type(пСлова) == dict, "В секцию импорта должен передаваться словарь слов, type="+type(пСлова)
		сам.__корень = пКорень
		сам.ошибка = пКорень.ошибка

		СловаСловарь_Проверить()
		сам.__слова_модуль = пСлова

		сам.__слова_импорт = {} #Содержит словарь словь в списке импорта
		сам.__бИмпорт = False # Признак наличия импорта
		сам.__бИмпортОдин = False # Признак того, что импорт одиночный

		сам.__слово_послед = None # последнее слово в импорте
		сам.__модули = {} # Содержит словарь для импорта модулей
		сам.__цМодули = 0

	def ЕслиИмпорт(сам):
		"""
		Первое слово в списке слов должно быть IMPORT.
		Если нет -- значит в исходнике нет импорта.
		IMPORT не может быть пустым.
		"""
		слово = сам.__слова_модуль[0]
		if слово.слово =='IMPORT':
			бВыход = True
		else:
			бВыход = False
		сам.__бИмпорт = бВыход
		return бВыход

	@property
	def бИмпорт(сам):
		return сам.__бИмопрт

	@property
	def модули(сам):
		return сам.__модули

	@property
	def слова(сам):
		return сам.__слова_модуль

	def ЕслиИмпортОдин(сам):
		"""
		Проверяет, что ключевое слово IMPORT в модуле встречается один раз
		"""
		счёт_импорт = 0
		цСловоНом = 0
		цСловаВсего = len(сам.__слова_модуль)
		while цСловоНом < цСловаВсего:
			слово = сам.__слова_модуль[цСловоНом]
			if слово.слово == 'IMPORT':
				счёт_импорт += 1
				if счёт_импорт > 1:
					сам.ошибка.Коорд("IMPORT два раза в одном модуле запрещён", слово.коорд, слово.стр)
			цСловоНом += 1
		сам.__бИмпортОдин = True
		return счёт_импорт

	def ЕслиИмпортОграничен(сам):
		"""
		Ищет разделитель окончания импорта.
		Должны быть ключевые слова CONST, TYPE, VAR, PROCEDURE, BEGIN
		"""
		цСловаВсего = len(сам.__слова_модуль)-1
		цСловоНом = 1 # первое слово после ИМПОРТ, а сам ИМПОРТ уже распознан
		слово = сам.__слова_модуль[цСловоНом]
		assert type(слово) == тСлово, "тИмпорт: Слово должно быть тСлово, type="+type(слово)
		бМаркер = (слово.слово in [ "CONST", "TYPE", "VAR", "PROCEDURE", "BEGIN"])
		while not бМаркер and (цСловоНом < цСловаВсего):
			цСловоНом += 1
			слово = сам.__слова_модуль[цСловоНом]
			assert type(слово) == тСлово, "тИмпорт: Слово должно быть тСлово, type="+type(слово)
			бМаркер = (слово.слово in ["CONST", "TYPE", "VAR", "PROCEDURE", "BEGIN"])
		if цСловоНом == цСловаВсего:
			сам.ошибка.Печать( "Секция IMPORT нигде не заканчивается ")
		цСловоНом -= 1
		слово = сам.__слова_модуль[цСловоНом]
		сам.__слово_послед = слово

	def Слова_Получ(сам):
		"""
		Выбирает слова по секции импорта.
		Дальше работает только с ними.
		"""
		слова_импорт = {}  # будущий словарь слов в секции импорта
		# Пропускаем IMPORT
		for счёт_импорт in range(1, сам.__слово_послед.номер+1):
			слово = сам.__слова_модуль[счёт_импорт]
			слово._Номер_Уст(счёт_импорт-1)
			#print("и+", счёт_импорт, слово.номер, слово.имя)
			слова_импорт[счёт_импорт-1] = слово
		сам.__слова_импорт = слова_импорт

		слова_модуль = {}  # будущий усечённый словарь всех оставшихся слов модуля
		счёт = 0
		# Пропускаем финальный ";" в импорте
		for счёт_импорт in range(сам.__слово_послед.номер+2, len(сам.__слова_модуль)):
			слово = сам.__слова_модуль[счёт_импорт]
			слово._Номер_Уст(счёт)
			#print("и-",счёт_импорт, слово.номер, слово.имя)
			слова_модуль[счёт] = слово
			счёт += 1
		сам.__слова_модуль = {}
		сам.__слова_модуль = слова_модуль

	def Импорт_Разобрать(сам):
		"""
		Делает разбор импорта, вычисляет алиасы.
		"""
		def Модуль_Доб(слово):
			assert type(слово) == тСлово, "тИмпорт: Добавлемое слово должен быть тСлово, type="+type(слово)
			assert слово != None, "Тег не может быть None"
			assert слово.слово != None or слово.слово != "", "Имя модуля не может быть None или пустым"

			имп = тАлиас("", слово.слово, сам.__цМодули)

			сам.__модули[сам.__цМодули] = имп
			сам.__цМодули += 1

		def Алиас_Добавить(алиас, имя):
			assert type(алиас) == тСлово, "тИмпорт: Алиас должен быть тСлово, type="+type(алиас)
			assert алиас != None, "тИмпорт: Алиас не может быть None"
			assert алиас.слово != None, "тИмпорт: Имя алиаса не может быть None"

			assert type(имя) == тСлово, "тИмпорт: Имя модуля должно быть тСлово, type="+type(имя)
			assert имя != None, "тИмпорт: имя не может быть None"
			assert имя.слово != None or имя.слово != "", "тИмпорт: Имя модуля не может быть None или пустым"
			имп = тАлиас(алиас.слово, имя.слово, сам.__цМодули)

			сам.__модули[сам.__цМодули] = имп
			сам.__цМодули += 1

		#print("тИмпорт.Импорт_Разобрать()")
		# второй слово должен быть один из трёх вариантов
		цСловоНом = 1
		имп_теги = сам.__слова_импорт
		while цСловоНом < len(имп_теги):
			слово = имп_теги[цСловоНом]
			#print(цСловоНом, слово.слово)
			if слово.слово == "," or слово.слово == ";":
				Модуль_Доб(имп_теги[цСловоНом-1])
				цСловоНом += 2
			elif слово.слово == ":=":
				Алиас_Добавить(имп_теги[цСловоНом-1], имп_теги[цСловоНом+1])
				цСловоНом += 4
			else: # неправильный разделитель
				сам.ошибка.Коорд("Неверный разделитель в импорте, слово= '"+имп_теги[цСловоНом-1].слово+"'", \
							имп_теги[цСловоНом-1].коорд, имп_теги[цСловоНом-1].стр)

	def Теги_Печать(сам):
		print("\nтИмпорт.Теги_Печать()")
		for keys in сам.__слова_модуль:
			слово = сам.__слова_модуль[keys]
			print(слово)

	def Имп_Печать(сам):
		print("\nтИмпорт.Имп_Печать()")
		for keys in сам.__слова_импорт:
			слово = сам.__слова_импорт[keys]
			print(слово)

	def Алиасы_Печать(сам):
		print("\nтИмпорт.Алиасы_Печать()")

		for keys in сам.__модули:
			имп = сам.__модули[keys]

			print(имп.номер, ":")
			if имп.бАлиас:
				print("    алиас: "+имп.алиас+";  слово: "+имп.слово)
			else:
				print("    слово: "+имп.слово)
			print

	@property
	def бИмпортОдин(сам):
		return сам.__бИмпортОдин

	def Обработать(сам):
		"""
		Обеспечивает обработку импорта модуля.
		"""
		if сам.ЕслиИмпорт():
			print("Есть импорт!")
			сам.ЕслиИмпортОдин()
			сам.ЕслиИмпортОграничен()
			сам.Слова_Получ()
			сам.Импорт_Разобрать()
			#сам.Имп_Печать()
			#сам.Алиасы_Печать()
			#сам.Теги_Печать()
