# coding: utf8
"""
Модуль "Импорт" содержит процедуры анализа возможного импорта модулей.
"""
if True:
	from пакКомпилер.пакСлово import тСлово
	from .модМодульИмя import тМодульИмя

class тИмпорт:
	def __init__(сам, пКорень, пСлова):
		def СловаСловарь_Проверить():
			бУсл = type(пСлова) == dict
			стрСообщ = "В секцию импорта должен передаваться словарь слов, type="+ str(type(пСлова))
			пКорень.конс.Проверить(бУсл, стрСообщ)
			assert type(пСлова) == dict, "В секцию импорта должен передаваться словарь слов, type="+type(пСлова)
		сам.__корень = пКорень
		сам.ошибка = пКорень.ошибка

		СловаСловарь_Проверить()
		сам.__слова_модуль = пСлова

		сам.__слова_импорт = {} # Содержит словарь словь в списке импорта
		сам.__бИмпорт = False # Признак наличия импорта

		сам.__слово_послед = None # последнее слово в импорте
		сам.__модули = {} # Содержит словарь для импорта модулей
		сам.__цМодулиВсего = 0 # Всего модулей для импорта

	def ЕслиИмпорт(сам):
		"""
		Первое слово в списке слов должно быть IMPORT.
		Если нет -- значит в исходнике нет импорта.
		IMPORT не может быть пустым.
		"""
		слово = сам.__слова_модуль[0]
		if слово.строка == 'IMPORT':
			бВыход = True
		else:
			бВыход = False
		сам.__бИмпорт = бВыход
		return бВыход

	@property
	def бИмпорт(сам):
		return сам.__бИмопрт

	@property
	def модули(сам):
		return сам.__модули

	@property
	def слова_импорт(сам):
		return сам.__слова_импорт

	@property
	def слова_модуль(сам):
		return сам.__слова_модуль

	def ЕслиИмпортОдин(сам):
		"""
		Проверяет, что ключевое слово IMPORT в модуле встречается один раз
		"""
		счёт_импорт = 0
		цСловоНом = 0
		цСловаВсего = len(сам.__слова_модуль)
		while цСловоНом < цСловаВсего:
			слово = сам.__слова_модуль[цСловоНом]
			цСловоНом += 1
			if слово.строка == 'IMPORT':
				счёт_импорт += 1
			if счёт_импорт > 1:
				сам.ошибка.Коорд("IMPORT два раза в одном модуле запрещён", слово.коорд, слово.стр)

	def ЕслиИмпортОграничен(сам):
		"""
		Ищет разделитель окончания импорта.
		Должно заканчиваться на ";"
		"""
		def Слово_Контроль():
			if (not сам.__бМаркер):
				сам.__цСловоНом += 1
			сам.__слово_врем = сам.__слова_модуль[сам.__цСловоНом]
			assert type(сам.__слово_врем) == тСлово, "тИмпорт: Слово должно быть тСлово, type="+type(сам.__слово_врем)
			сам.__бМаркер = (сам.__слово_врем.строка == ";")

		сам.__слово_врем = None
		сам.__бМаркер = False
		цСловаВсего = len(сам.__слова_модуль)-1
		сам.__цСловоНом = 0 # первое сам.__слово_врем после ИМПОРТ, а сам ИМПОРТ уже распознан
		Слово_Контроль()
		while (not сам.__бМаркер) and (сам.__цСловоНом < цСловаВсего):
			Слово_Контроль()
		if not сам.__бМаркер:
			сам.ошибка.Печать( "Секция IMPORT нигде не заканчивается ")
		сам.__слово_послед = сам.__слово_врем

	def Слова_Разделить(сам):
		"""
		1. Выбирает слова по секции импорта.
		2. Уменьшает словарь словь модуля
		Дальше работает только со словами импорта.
		"""
		слова_импорт = {}  # будущий словарь слов в секции импорта
		# Пропускаем IMPORT
		for счёт_импорт in range(1, сам.__слово_послед.номер+1):
			слово = сам.__слова_модуль[счёт_импорт]
			слово._Номер_Уст(счёт_импорт-1)
			#print("и+", счёт_импорт, слово.номер, слово.имя)
			слова_импорт[счёт_импорт-1] = слово
		сам.__слова_импорт = слова_импорт

		слова_модуль = {}  # будущий усечённый словарь всех оставшихся слов модуля
		счёт = 0
		# Пропускаем финальный ";" в импорте
		for счёт_импорт in range(сам.__слово_послед.номер+2, len(сам.__слова_модуль)):
			слово = сам.__слова_модуль[счёт_импорт]
			слово._Номер_Уст(счёт)
			#print("и-",счёт_импорт, слово.номер, слово.имя)
			слова_модуль[счёт] = слово
			счёт += 1
		сам.__слова_модуль = {}
		сам.__слова_модуль = слова_модуль

	def Импорт_Разобрать(сам):
		"""
		Делает разбор импорта, вычисляет алиасы.
		"""
		def Модуль_Доб(слово):
			assert type(слово) == тСлово, "тИмпорт: Добавлемое слово должен быть тСлово, type="+type(слово)
			assert слово != None, "тИмпорт: Слово не может быть None"
			assert (слово.строка != None or слово.строка != ""), "тИмпорт: Имя модуля не может быть None или пустым"

			модуль = тМодульИмя("", слово.строка, сам.__цМодулиВсего)

			сам.__модули[сам.__цМодулиВсего] = модуль
			сам.__цМодулиВсего += 1

		def Алиас_Добавить(пАлиас, пМодуль):
			assert type(пАлиас) == тСлово, "тИмпорт: Алиас должен быть тСлово, type="+type(пАлиас)
			assert пАлиас != None, "тИмпорт: Алиас не может быть None"
			assert пАлиас.строка != None, "тИмпорт: Имя алиаса не может быть None"

			assert type(пМодуль) == тСлово, "тИмпорт: Имя модуля должно быть тСлово, type="+type(пМодуль)
			assert пМодуль != None, "тИмпорт: пМодуль не может быть None"
			assert пМодуль.строка != None or пМодуль.строка != "", "тИмпорт: Имя модуля не может быть None или пустым"
			модуль = тМодульИмя(пАлиас.строка, пМодуль.строка, сам.__цМодулиВсего)

			сам.__модули[сам.__цМодулиВсего] = модуль
			сам.__цМодулиВсего += 1

		#print("тИмпорт.Импорт_Разобрать()")
		# второй слово должен быть один из трёх вариантов
		цСловоНом = 1
		слова_импорт = сам.__слова_импорт
		while цСловоНом < len(слова_импорт):
			слово = слова_импорт[цСловоНом]
			#print(цСловоНом, слово.слово)
			if слово.строка in [",", ";"]:
				Модуль_Доб(слова_импорт[цСловоНом-1])
				цСловоНом += 2 # указатель на следующее слово в секции импорта
			elif слово.строка == ":=":
				лАлиас  = слова_импорт[цСловоНом-1]
				лМодуль = слова_импорт[цСловоНом+1]
				Алиас_Добавить(лАлиас, лМодуль)
				цСловоНом += 4 # переместить на следующий разделитель
			else: # неправильный разделитель
				сам.ошибка.Коорд("тИмпорт:  Неверный разделитель в импорте, слово= '" + \
									слова_импорт[цСловоНом-1].слово+"'", \
									слова_импорт[цСловоНом-1].коорд, \
									слова_импорт[цСловоНом-1].стр)

	def СловаМодуль_Печать(сам):
		"""
		Печатает все слова, оставшиеся модулю
		"""
		print("\nтИмпорт.СловаМодуль_Печать()")
		for ключ in сам.__слова_модуль:
			слово = сам.__слова_модуль[ключ]
			print(слово)

	def СловаИмпорт_Печать(сам):
		"""
		Пеатает все слова, доставшиеся импорту
		"""
		print("\nтИмпорт.СловаИмпорт_Печать()")
		for ключ in сам.__слова_импорт:
			слово = сам.__слова_импорт[ключ]
			print(слово)

	def Модули_Печать(сам):
		"""
		Печатает все имена модулей для импорта и их алиасы (если есть)
		"""
		print("\nтИмпорт.Модули_Печать()")

		for ключ in сам.__модули:
			модуль = сам.__модули[ключ]

			print(модуль.номер, ":")
			if модуль.бАлиас:
				print("    модуль: "+ модуль.имя + ",\tалиас: "+модуль.алиас + ";")
			else:
				print("    модуль: " + модуль.имя + ";")
			print

	@property
	def бИмпортОдин(сам):
		return сам.__бИмпортОдин

	def Обработать(сам):
		"""
		Обеспечивает обработку импорта модуля.
		"""
		if сам.ЕслиИмпорт():
			print("Есть импорт!")
			сам.ЕслиИмпортОдин()
			сам.ЕслиИмпортОграничен()
			сам.Слова_Разделить()
			сам.Импорт_Разобрать()
			#сам.Имп_Печать()
			#сам.Алиасы_Печать()
			#сам.Модули_Печать()
