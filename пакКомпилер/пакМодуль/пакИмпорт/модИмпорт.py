# coding: utf8
"""
Модуль "Импорт" содержит процедуры анализа возможного импорта модулей.
"""
if True:
	from пакКомпилер.пакСлово import тСлово
	from .модМодульТип import тМодуль

class тИмпорт:
	def __init__(сам, пКорень, пСлова):
		def СловаСловарь_Проверить():
			бУсл = type(пСлова) == dict
			стрСообщ = "тИмпорт: пСлова должен быть словарь слов, type="+ str(type(пСлова))
			пКорень.конс.Проверить(бУсл, стрСообщ)
		сам.__корень = пКорень
		сам.ошибка = пКорень.ошибка

		СловаСловарь_Проверить()
		сам.__слова_модуля = пСлова

		сам.слова_секции = {} # Содержит словарь слов в списке импорта
		сам.__бИмпорт = False # Признак наличия импорта

		сам.__слово_конец = None # последнее слово в импорте
		сам.__модули = {} # Содержит словарь для импорта модулей

	def ЕслиИмпорт(сам):
		"""
		Первое слово в списке слов должно быть IMPORT.
		Если нет -- значит в исходнике нет импорта.
		IMPORT не может быть пустым.
		"""
		слово = сам.__слова_модуля[0]
		if слово.строка == 'IMPORT':
			сам.__бИмпорт = True
			# укоротить слова
			слова_модуля = {}
			for счёт in range(1, len(сам.__слова_модуля)):
				слово = сам.__слова_модуля[счёт]
				слово._Номер_Уст(счёт-1)
				слова_модуля[счёт-1] = слово
			сам.__слова_модуля = {}
			сам.__слова_модуля = слова_модуля
		return сам.__бИмпорт

	@property
	def бИмпорт(сам):
		return сам.__бИмопрт

	@property
	def модули(сам):
		return сам.__модули

	@property
	def цМодулиВсего(сам):
		return len(сам.__модули)

	@property
	def цСловаМодуляВсего(сам):
		return len(сам.__слова_модуля)

	@property
	def слова_модуль(сам):
		return сам.__слова_модуля

	def ЕслиИмпортОдин(сам):
		"""
		Проверяет, что ключевое слово IMPORT в модуле встречается один раз
		"""
		цСчётИмпорт = 0
		цСловоНом = 0
		цСловаВсего = len(сам.__слова_модуля)
		while цСловоНом < цСловаВсего:
			слово = сам.__слова_модуля[цСловоНом]
			цСловоНом += 1
			if слово.строка == 'IMPORT':
				цСчётИмпорт += 1
			if цСчётИмпорт > 1:
				сам.ошибка.Коорд("тИмпорт: IMPORT два раза в одном модуле запрещён", слово.стрИсх)

	def ЕслиИмпортОграничен(сам):
		"""
		Ищет разделитель окончания импорта.
		Должно заканчиваться на ";"
		"""
		слово_врем = None
		бМаркер = False
		цСловоНом = 0 # первое слово_врем после ИМПОРТ, а сам ИМПОРТ уже распознан

		if (not бМаркер):
			цСловоНом += 1
		слово_врем = сам.__слова_модуля[цСловоНом]
		assert type(слово_врем) == тСлово, "тИмпорт: Слово должно быть тСлово, type="+type(слово_врем)
		бМаркер = (слово_врем.строка == ";")

		while (not бМаркер) and (цСловоНом < сам.цСловаМодуляВсего):

			if (not бМаркер):
				цСловоНом += 1
			слово_врем = сам.__слова_модуля[цСловоНом]
			assert type(слово_врем) == тСлово, "тИмпорт: Слово должно быть тСлово, type="+type(слово_врем)

			бМаркер = (слово_врем.строка == ";")
		if not бМаркер:
			сам.ошибка.Печать( "тИмпорт: секция нигде не заканчивается ")
		сам.__слово_конец = слово_врем

	def Слова_Разделить(сам):
		"""
		1. Выбирает слова по секции импорта.
		2. Уменьшает словарь словь модуля
		Дальше работает только со словами импорта.
		"""
		слова_секции = {}  # будущий словарь слов в секции импорта
		# IMPORT уже нет
		for цСчётИмпорт in range(0, сам.__слово_конец.номер+1):
			слово = сам.__слова_модуля[цСчётИмпорт]
			слово._Номер_Уст(цСчётИмпорт)
			#print("и+", цСчётИмпорт, слово.номер, слово.имя)
			слова_секции[цСчётИмпорт] = слово
		сам.слова_секции = слова_секции

		слова_модуль = {}  # будущий усечённый словарь всех оставшихся слов модуля
		счёт = 0
		# Пропускаем финальный ";" в импорте
		for цСчётИмпорт in range(сам.__слово_конец.номер+1, len(сам.__слова_модуля)):
			слово = сам.__слова_модуля[цСчётИмпорт]
			слово._Номер_Уст(счёт)
			#print("и-",цСчётИмпорт, слово.номер, слово.имя)
			слова_модуль[счёт] = слово
			счёт += 1
		сам.__слова_модуля = {}
		сам.__слова_модуля = слова_модуль

	def Импорт_Разобрать(сам):
		"""
		Делает разбор импорта, вычисляет алиасы.
		"""
		while len(сам.слова_секции) > 0:
			модуль = тМодуль(сам)
			сам.__модули[сам.цМодулиВсего] = модуль
			модуль = None

	def СловаМодуль_Печать(сам):
		"""
		Печатает все слова, оставшиеся модулю
		"""
		print("\nтИмпорт.СловаМодуль_Печать()")
		for ключ in сам.__слова_модуля:
			слово = сам.__слова_модуля[ключ]
			print(слово)

	def СловаИмпорт_Печать(сам):
		"""
		Печатает все слова, доставшиеся импорту
		"""
		print("\nтИмпорт.СловаИмпорт_Печать()")
		for ключ in сам.слова_секции:
			слово = сам.слова_секции[ключ]
			print(слово)

	def Обработать(сам):
		"""
		Обеспечивает обработку импорта модуля.
		"""
		if сам.ЕслиИмпорт():
			print("Есть импорт!")
			сам.ЕслиИмпортОдин()
			сам.ЕслиИмпортОграничен()
			сам.Слова_Разделить()
			сам.Импорт_Разобрать()
