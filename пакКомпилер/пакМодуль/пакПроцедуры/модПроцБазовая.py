# coding: utf8
"""
Базовый тип процедуры, содержит все стандартные свойства и процедуры типа
"""

class тПроцБазовая:
	def __init__(сам, пДанные):
		def Слова_Проверить():
			бУсл = type(пДанные['слова']) == dict
			стрОш = "В секцию  должен передаваться словарь слов, type=" + str(type(пДанные['слова']))
		Слова_Проверить()
		if пДанные['секция'] != "PROCEDURE":
			assert False, "тПроцБазовая: ошибчное использование процедуры в секции PROCEDURE, секция=" + пДанные['секция']
		сам.слова_секции = пДанные['слова']
		сам.__бЭкспорт_бПрисвоено = False # Защёлка присвоениЯ экспорта
		сам.__бЭкспорт = пДанные['бЭкспорт']
		сам.__имя = ""

	def Разделитель_Обрезать(сам):
		"""
		В типах последнее слово ";"
		Поэтому его необходимо обрезать
		"""
		слово_раздел = сам.слова_секции[0]
		if слово_раздел.род == тСлово.кТочкаЗапятая:
			сам.СловаСекции_Обрезать()
		else:
			# В типе всегда есть разделитель в конце
			assert False, "тПроцБазовая: неправильный разделитель процедуры" + слово_раздел.стрИсх

	def Имя_Уст(сам, пИмя):
		"""
		Устанавливает имя с проверкой.
		Разрешаетися устанавливать один раз.
		Процедура с защёлкой.
		"""
		assert type(пИмя) == str, "тПроцБазовая: пИмя должен быть str, type=" + str(type(пИмя))
		assert пИмя != "", "тПроцБазовая: пИмя не может быть пустым"
		assert сам.__имя == "", "тПроцБазовая: имя уже присвоено, имя=" + сам.__имя
		сам.__имя = пИмя

	def СловаСекции_Обрезать(сам):
		"""
		Уменьшает слова секции на 1 с головы.
		"""
		новый_список = {}
		for ключ in range(1, len(сам.слова_секции)):
			новый_список[ключ-1]=сам.слова_секции[ключ]
		сам.слова_секции = {}
		сам.слова_секции = новый_список

	@property
	def имя(сам):
		return сам.__имя

	def бЭксорт_Уст(сам, пЭкспорт):
		"""
		Устанавливает экспорт с проверкой.
		Разрешаетися устанавливать один раз.
		Процедура с защёлкой.
		"""
		assert type(пЭкспорт) == BOOLEAN, "тПроцБазовая: пЭкспорт должен быть BOOLEAN, type=" + str(type(пЭкспорт))
		assert сам.__бЭкспорт_бПрисвоено == False, "тПроцБазовая: пЭкспорт уже присвоен, экспорт=" + сам.__бЭкспорт
		сам.__бЭкспорт_бПрисвоено = True
		сам.__бЭкспорт = пЭкспорт

	@property
	def бЭкспорт(сам):
		return сам.__бЭкспорт
