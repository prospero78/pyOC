# coding:utf8
"""
Модуль описывает тип процедуры. По сути, микромодуль.
"""

if True:
	from пакКомпилер.пакСлово import тСлово
	from . модПроцПараметр import тПроцПараметр

class тПроцедура:
	def __init__(сам, пБаза):
		сам.база = пБаза
		сам.слова_секции = пБаза.слова_секции
		сам.__имя = "" # Имя процедуры
		сам.__бЭкспорт = False
		сам.__Процедура_Проверить()
		сам.__Имя_Проверить()
		сам.__Экспорт_Проверить()
		if сам.__СкобкаЛев_Открыть():
			сам.__Параметры_Проверить()

	def __Процедура_Проверить(сам):
		"""
		Проверяет наличие слова PROCEDURE среди слов секции
		"""
		строка_проц = сам.Слово_Проверить()
		бУсл = строка_проц == "PROCEDURE"
		стрОш = "тПроцедура: процедура должна начинаться PROCEDURE, строка=" + строка_проц
		assert бУсл, стрОш
		сам.СловаСекции_Обрезать()
		print("Процедура ========")

	def __Имя_Проверить(сам):
		"""
		Проверяет имя процедуры.
		Имя НЕ МОЖЕТ быть составным
		"""
		имя = сам.Слово_Проверить()
		слово_имя = сам.слова_секции[0]
		if слово_имя.ЕслиИмя():
			сам.СловаСекции_Обрезать()
			сам.__имя = имя
		else:
			assert False, "тПроцедура: имя должно быть допустимым именем, имя=" + имя
		print("    Имя:", имя)

	def __Экспорт_Проверить(сам):
		"""
		Проверяет является ли процедура экспортируемой.
		"""
		строка_экспорт = сам.Слово_Проверить()
		if строка_экспорт == "*": # есть экспорт
			сам.СловаСекции_Обрезать()
			сам.__бЭкспорт = True
		elif строка_экспорт == "(":
			pass # это начало входных условий
		else:
			assert False, "тПроцедура: литера экспорта допустим '*' или '(',    строка=" + строка_экспорт
		print("    бЭкспорт:", сам.__бЭкспорт)

	def __СкобкаЛев_Открыть(сам):
		"""
		Проверяет на открытие левой скобки (значит есть входные параметры)
		В этой позиции может быть скобка, а может и нет. Надо проверять.
		"""
		бРезультат = False
		строка_скобка = сам.Слово_Проверить()
		if строка_скобка == "(":
			бРезультат = True
			сам.СловаСекции_Обрезать()
		print("Есть параметры процедуры:")
		return бРезультат

	def __Параметры_Проверить(сам):
		"""
		Получает параметры процедуры.
		Крутит до тех пор, пока слово не станет ")"
		"""
		строка = сам.Слово_Проверить()
		while строка != ")": # есть зарытие параметров
			параметр = None
			параметр = тПроцПараметр(сам)
			сам.параметры = параметр

	def СловаСекции_Обрезать(сам):
		"""
		Уменьшает слова секции на 1 с головы.
		"""
		новый_список = {}
		for ключ in range(1, len(сам.слова_секции)):
			новый_список[ключ-1]=сам.слова_секции[ключ]
		сам.слова_секции = {}
		сам.слова_секции = новый_список

	def Слово_Проверить(сам):
		"""
		Проверяет первое слово в словаре слов секции на допустимость.
		"""
		слово = сам.слова_секции[0]
		assert type(слово) == тСлово, "тТипБазовый: слово должно быть тСлово, тип="+str(type(слово))
		строка = слово.строка
		assert type(строка) == str, "тТипБазовый: строка должна быть 'str', type=" + str(type(строка))
		assert строка != "", "тТипБазовый: строка не может быть пустой"
		return строка

	def Паспорт_Печать(сам):
		print("тПроцедура: надо доделать Паспорт_Печать()")
