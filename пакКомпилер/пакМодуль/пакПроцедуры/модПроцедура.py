# coding:utf8
"""
Модуль описывает тип процедуры. По сути, микромодуль.
"""

if True:
	from пакКомпилер.пакСлово import тСлово
	from . модПроцПараметр import тПроцПараметр
	from пакКомпилер.пакМодуль.пакКонст import тКонстанты
	from пакКомпилер.пакМодуль.пакТипы  import тТипы
	from пакКомпилер.пакМодуль.пакПерем import тПеременные

бОтл = True # Признак отладки
def Отл(стр):
	if бОтл:
		print(стр)

class тПроцедура:
	def __init__(сам, пДанные):
		сам.секция = пДанные["секция"]
		сам.слова_секции = пДанные["слова"]
		сам.__слова_проц = {} # Слова в своей процедуре
		сам.__имя = "" # Имя процедуры
		сам.__бЭкспорт = False
		сам.__бВозврат = False # признак возврата значения
		сам.__тВозврат = "" # Тип возвращаемого значения
		сам.__конст = {} # Возможные константы в процедуре
		сам.__типы = {}  # Возможные типы в процедуре
		сам.__перем = {} # Возможные переменные в процедуре
		сам.__проц = {} # Возможные процедуры в процедуре
		сам.__проц_конец = None # указатель на окончание своей процедуры
		сам.параметры = {} # словарь параметров передаваемых в процедуру
		сам.__Процедура_Проверить()
		сам.__Имя_Проверить()
		сам.__Экспорт_Проверить()# ***
		Отл(1)
		if сам.__СкобкаЛев_Открыть():
			Отл(1.1)
			сам.__Параметры_Проверить()
			Отл(1.2)
			сам.__СкобкаПрав_Закрыть()
			Отл(1.3)
			if сам.__Двоеточие_Обрезать():
				Отл(1.301)
				сам.__Возврат_Проверить()
				Отл(1.302)
		Отл(2)
		сам.__Разделитель_Обрезать()
		Отл(3)
		сам.__КонецСвой_Найти()
		Отл(4)
		сам.__СловаПроц_Получить()
		print("тПроцедура: Длина слов-всего:", len(сам.слова_секции))
		сам.__Константы_Проверить()
		print("тПроцедура: Длина слов-конст:", len(сам.слова_секции))
		сам.__Типы_Проверить()
		print("тПроцедура: Длина слов-типы:", len(сам.слова_секции))
		сам.__Переменные_Проверить()
		print("тПроцедура: Длина слов-перем:", len(сам.слова_секции))
		сам.__ПроцедурыВнутр_Проверить()
		print("тПроцедура: Длина слов-проц:", len(сам.слова_секции))

	def __СловаПроц_Получить(сам):
		"""
		Выбирает слова по своей процедуре.
		Дальше работает только с ними.
		"""
		слова_проц = {}  # будущий словарь слов секции процедур
		print("Длина слов-19 конец процедуры:", сам.__проц_конец)
		for цСчётПроц in range(0, сам.__проц_конец.номер - 1):
			слово = сам.слова_секции[цСчётПроц]
			слово._Номер_Уст(цСчётПроц)
			#print("пр+", слово)
			слова_проц[цСчётПроц] = слово
		сам.__слова_проц = слова_проц
		print("Длина слов-04:", len(сам.слова_секции))

		слова_секции = {}  # будущий словарь слов секции
		цСчётМодуль = 0
		for цСчёт in range(сам.__проц_конец.номер+1, len(сам.слова_секции)):
			слово = сам.слова_секции[цСчёт]
			слово._Номер_Уст(цСчётМодуль)
			#print("т-", цСчёт, слово.номер, слово.слово)
			слова_секции[цСчётМодуль] = слово
			цСчётМодуль += 1
		сам.слова_секции = {}
		сам.слова_секции = слова_секции

	def __КонецСвой_Найти(сам):
		"""
		Разбор тела процедуры будет неправильным, если нет своего конца.
		Свой конец надо искать после нахождения своего имени.
		"""
		цКонец =  0
		слово0 = None
		слово1 = None
		слово2 = None
		while цКонец < len(сам.слова_секции):
			слово0 = сам.слова_секции[цКонец]
			if слово0.строка =="END":
				слово1 = сам.слова_секции[цКонец+1]
				if слово1.строка == сам.__имя:
					слово2 = сам.слова_секции[цКонец+2]
					if слово2.строка == ";": # это точно конец процедуры
						break
			цКонец += 1
		сам.__проц_конец = сам.слова_секции[цКонец + 2]

	def __ПроцедурыВнутр_Проверить(сам):
		"""
		Процедура, по сути -- микромодуль, может содержать процедуры.
		Надо проверить.
		"""
		#TODO: процедур может быть несколько
		if len(сам.__слова_проц) > 0:
			сам.__проц[len(сам.__проц)] = тПроцедура(сам)
			сам.__слова_проц = {}
			сам.__слова_проц = сам.__проц.слова_модуля

	def __Переменные_Проверить(сам):
		"""
		Процедура, по сути -- микромодуль, может содержать переменные.
		Надо проверить.
		"""
		if len(сам.__слова_проц) > 0:
			сам.__перем = тПеременные(сам)
			сам.слова_секции = {}
			сам.слова_секции = сам.__перем.слова_секции

	def __Типы_Проверить(сам):
		"""
		Процедура, по сути -- микромодуль, может содержать типы.
		Надо проверить.
		"""
		if len(сам.__слова_проц) > 0:
			сам.__типы = тТипы(сам)
			сам.__слова_проц = {}
			сам.__слова_проц = сам.__типы.слова_модуля

	def __Константы_Проверить(сам):
		"""
		Процедура, по сути -- микромодуль, может содержать констаты.
		Надо проверить.
		"""
		if len(сам.__слова_проц) > 0:
			сам.__конст = тКонстанты(сам)
			сам.__слова_проц = {}
			сам.__слова_проц = сам.__конст.слова_модуля

	def __Разделитель_Обрезать(сам):
		"""
		В простых типах последнее слово ";"
		Поэтому его необходимо обрезать
		"""
		print("Длина слов-20:", len(сам.слова_секции))
		слово_раздел = сам.слова_секции[0]
		строка_раздел = слово_раздел.Проверить()
		if строка_раздел == ";":
			сам.СловаСекции_Обрезать()
		else:
			assert False, "тПроцедура: неправильный разделитель" + слово_раздел.стрИсх

	def __Двоеточие_Обрезать(сам):
		"""
		Здесь может быть, а может и не быть ":"
		"""
		бДвоеточие = False
		слово_двоеточ = сам.слова_секции[0]
		строка_двоеточ = слово_двоеточ.Проверить()
		if строка_двоеточ == ":": # есть двоеточие
			сам.СловаСекции_Обрезать()
			бДвоеточие = True
		return бДвоеточие

	def __Возврат_Проверить(сам):
		"""
		Проверяет тип возврата процедуры. Должно быть разрешённой строкой.
		Кроме того, имя может быть составным
		"""
		стрОш = "тПроцедура: тип возврата должен быть допустимым именем"
		слово_возврат = сам.слова_секции[0]
		строка_возврат = слово_возврат.Проверить()
		assert слово_возврат.ЕслиСтр_Допустимо(), стрОш + слово_возврат.стрИсх
		while not ((строка_возврат == ";") or (строка_возврат == ")")):
			сам.СловаСекции_Обрезать()
			сам.__тВозврат += строка_возврат
			слово_возврат = сам.слова_секции[0]
			строка_возврат = слово_возврат.Проверить()
			бРезульт = True
		assert сам.__тВозврат != "", "тПроцедура: тип возврата не может быть пустой строкой"
		return бРезульт

	def __Процедура_Проверить(сам):
		"""
		Проверяет наличие слова PROCEDURE среди слов секции
		"""
		слово_проц = сам.слова_секции[0]
		строка_проц = слово_проц.Проверить()
		бУсл = строка_проц == "PROCEDURE"
		стрОш = "тПроцедура: процедура должна начинаться PROCEDURE" + слово_проц.стрИсх
		assert бУсл, стрОш
		сам.СловаСекции_Обрезать()

	def __Имя_Проверить(сам):
		"""
		Проверяет имя процедуры.
		Имя НЕ МОЖЕТ быть составным
		"""
		слово_имя = сам.слова_секции[0]
		имя = слово_имя.Проверить()
		if слово_имя.ЕслиИмя_Строго():
			сам.СловаСекции_Обрезать()
			сам.__имя = имя
		else:
			assert False, "тПроцедура: имя должно быть допустимым именем" + слово_имя.стрИсх

	def __Экспорт_Проверить(сам):
		"""
		Проверяет является ли процедура экспортируемой.
		"""
		слово_экспорт = сам.слова_секции[0]
		строка_экспорт = слово_экспорт.Проверить()
		if строка_экспорт == тСлово.кУмножить: # есть экспорт
			сам.СловаСекции_Обрезать()
			сам.__бЭкспорт = True
		elif слово_экспорт.род == тСлово.кСкобкаОткрКругл:
			pass # это начало входных условий
		else:
			слово = сам.слова_секции[0]
			assert False, "тПроцедура: литера экспорта допустима '*' или '('" + слово.стрИсх

	def __СкобкаЛев_Открыть(сам):
		"""
		Проверяет на открытие левой скобки (значит есть входные параметры)
		В этой позиции может быть скобка, а может и нет. Надо проверять.
		"""
		бРезультат = False
		слово_скобка = сам.слова_секции[0]
		строка_скобка = слово_скобка.Проверить()
		if строка_скобка == "(":
			бРезультат = True
			сам.СловаСекции_Обрезать()
		return бРезультат

	def __СкобкаПрав_Закрыть(сам):
		"""
		Проверяет на закрытие правой скобки
		В этой позиции должна быть скобка.
		"""
		слово_скобка = сам.слова_секции[0]
		строка_скобка = слово_скобка.Проверить()
		if строка_скобка == ")":
			сам.СловаСекции_Обрезать()
		else:
			assert False, "тПроцедура: Параметры должны заканчиваться ')'" +слово_скобка.стрИсх
		print("Конец параметров процедуры")

	def __Параметры_Проверить(сам):
		"""
		Получает параметры процедуры.
		Крутит до тех пор, пока слово не станет ")"
		"""
		слово_парам = сам.слова_секции[0]
		строка = слово_парам.Проверить()
		c=0
		while строка != ")": # есть зарытие параметров
			параметр = None
			параметр = тПроцПараметр(сам)
			сам.параметры[len(сам.параметры)] = параметр
			print(c, "тПроцедура: проверка параметров:", "\n", строка, параметр, слово_парам.стрИсх)
			c+=1
			слово_парам = сам.слова_секции[0]
			строка = слово_парам.Проверить()
		print("===========тПроцедура: Закрытие параметра:", слово_парам.стрИсх)


	def СловаСекции_Обрезать(сам):
		"""
		Уменьшает слова секции на 1 с головы.
		"""
		новый_список = {}
		for ключ in range(1, len(сам.слова_секции)):
			новый_список[ключ-1]=сам.слова_секции[ключ]
		сам.слова_секции = None
		сам.слова_секции = новый_список

	def Паспорт_Печать(сам):
		print("тПроцедура: надо доделать Паспорт_Печать()")
