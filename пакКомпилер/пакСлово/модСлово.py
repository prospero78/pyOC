# coding: utf8
"""
Модуль предоставляет тип слова для построения AST.
Настройка пакета слов.
Слово -- кусочек текста в исходнике.
Обладает несколькими свойствами:
1. Литеры (само слово)
2. Координаты.
3. Строка, в которой он находится.
"""

from пакКомпилер.пакИсходник.модКоординаты import тКоорд

class тСлово:
	"""
		Тип тСлово описывает слово, как отдельную сущность в составе исходного
		текста, обладает различными атрибутами.
	"""
	кПусто, кМодуль, кМодульАлиас = range(3)
	def __init__(сам, корень, коорд, пстрСлово, пцНомерСлова):
		def Коорд_Проверить():
			бУсл = type(коорд) == тКоорд
			стрСообщ = "тСлово.__init__(): коорд должен быть тКоорд, type(коорд)="+str(type(коорд))
			корень.конс.Проверить(бУсл, стрСообщ)
		
		def Литеры_Проверить():
			бУсл = type(пстрСлово) == str
			стрСообщ = "тСлово.__init__(): пстрСлово должно быть строкой, type(пстрСлово)="+str(type(пстрСлово))
			корень.конс.Проверить(бУсл, стрСообщ)
			
			бУсл = len(пстрСлово) > 0
			стрСообщ = "тСлово.__init__(): пстрСлово не могут быть пустыми"
			корень.конс.Проверить(бУсл, стрСообщ)
		
		def НомерСлова_Проверить():
			бУсл = type(пцНомерСлова) == int
			стрСообщ = "тСлово.__init__(): пцНомерСлова должен быть целым, type(пцНомерСлова)="+str(type(пцНомерСлова))
			корень.конс.Проверить(бУсл, стрСообщ)
			
			бУсл = пцНомерСлова >= 0
			стрСообщ = "тСлово.__init__(): пцНомерСлова должен быть равен или больше 0, пцНомерСлова="+str(пцНомерСлова)
			корень.конс.Проверить(бУсл, стрСообщ)
			сам.__номер = пцНомерСлова
			
		сам.__корень = корень
		сам.конс = корень.конс
		
		Коорд_Проверить()
		Литеры_Проверить()
		НомерСлова_Проверить()
		
		сам.коорд = тКоорд(корень, коорд.стр, коорд.поз)
		сам.__слово = пстрСлово
		сам.__слово_тип = тСлово.кПусто

	@property
	def слово(сам):
		return сам.__слово

	@property
	def номер(сам):
		return сам.__номер

	def _Номер_Уст(сам, номер):
		усл = type(номер) == int
		_текст = "тСлово.__init__(): номер должен быть целым, type(номер)="+str(type(номер))
		сам.__корень.конс.Проверить(усл, _текст)
		
		усл = номер >= 0
		_текст = "тСлово.__init__(): номер должен быть равен или больше 0, номер="+str(номер)
		сам.__корень.конс.Проверить(усл, _текст)
		
		сам.__номер = номер

	def ЕслиИмя(сам):
		'''
		Проверяет на допустимость литер в слове для обнаружения имени сущности.
		'''
		# слово должно начинаться либо с "_", либо с буквы
		бВыход = False
		if сам.__слово[0]=="_":
			бВыход = True
		elif сам.__слово[0].isalpha():
			бВыход = True
		return бВыход

	def __str__(сам):
		слово = сам.__слово
		while len(слово) < 7:
			слово = " " + слово
		return str(сам.__номер)+"\tслово="+ слово + "\t" + str(сам.коорд)
