"""
Модуль предоставляет тип тега для построения AST.
Настройка пакета тегов.
Тег -- кусочек текста в исходнике.
Обладает несколькими свойствами:
1. Текст (имя)
2. Координаты.
3. Строка, в которой он находится.
"""

from пакКомпилер.пакИсходник.модКоординаты import тКоорд

class тТег:
   """
      Тип тег описывает тег, как отдельную сущность в составе исходного
      текста, обладает различными атрибутами.
   """
   пусто, модуль, модуль_алиас = range(3)
   def __init__(self, root, коорд, имя, номер):
      self.__root = root
      self.конс = root.конс
      
      усл = type(коорд) == тКоорд
      _текст = "тТег.__init__(): коорд должен быть тКоорд, type(коорд)="+str(type(коорд))
      root.конс.Проверить(усл, _текст)
      self.коорд = тКоорд(root, коорд.стр, коорд.поз)

      
      усл = type(имя) == str
      _текст = "тТег.__init__(): имя должно быть строкой, type(имя)="+str(type(имя))
      root.конс.Проверить(усл, _текст)
      
      усл = len(имя) > 0
      _текст = "тТег.__init__(): имя не может быть пустым"
      root.конс.Проверить(усл, _текст)
      self.__имя = имя

      усл = type(номер) == int
      _текст = "тТег.__init__(): номер должен быть целым, type(номер)="+str(type(номер))
      root.конс.Проверить(усл, _текст)
      
      усл = номер >= 0
      _текст = "тТег.__init__(): номер должен быть равен или больше 0, номер="+str(номер)
      root.конс.Проверить(усл, _текст)
      self.__номер = номер

      self.__тип_тега = тТег.пусто
      self.__алиас_модуля = ""

   @property
   def имя(self):
      return self.__имя

   #@property
   #def тип_тега(self):
      #return self.__тип_тега

   #def ТипТега_Уст(self, тип):
      #assert type(тип) == int, "Тип тега должен быть целым!, type(тип)="+type(тип)
      #assert тип >= 0, "Тип тега не может быть отрицательным числом, тип="+str(тип)
      #if тип == тТег.пусто:
         #self.__тип_тега == тТег.пусто
      #elif тип == тТег.модуль:
         #self.__тип_тега == тТег.модуль
      #elif тип == тТег.модуль_алиас:
         #self.__тип_тега == тТег.модуль_алиас
      #else:
         #assert false, "Неизвестный тип тега"

   #@property
   #def алиас(self):
      #return self.__алиас_модуля

   #def АлиасМодуля_Уст(self, алиас):
      #assert type(алиас) == str, "Алиас имени модуля должен быть строкой, type="+type(алиас)
      #assert алиас != "", "Алиас имени модуля не может быть пустой строкой, алиас="+алиас
      #self.__алиас_модуля = алиас

   @property
   def номер(self):
      return self.__номер

   def _Номер_Уст(self, номер):
      усл = type(номер) == int
      _текст = "тТег.__init__(): номер должен быть целым, type(номер)="+str(type(номер))
      self.__root.конс.Проверить(усл, _текст)
      
      усл = номер >= 0
      _текст = "тТег.__init__(): номер должен быть равен или больше 0, номер="+str(номер)
      self.__root.конс.Проверить(усл, _текст)
      
      self.__номер = номер

   def ЕслиИмя(self):
      '''
      Проверяет на допустимость имени сущности.
      '''
      # имя должно начинаться либо с "_", либо с буквы
      бВыход = False
      if self.имя[0]=="_":
         бВыход = True
      elif self.имя[0].isalpha():
         бВыход = True
      return бВыход

   def __str__(self):
      имя = self.__имя
      while len(имя) < 7:
         имя = " " + имя
      имя = " " + имя
      return str(self.__номер)+"\tимя="+ имя + "\t" + str(self.коорд)
