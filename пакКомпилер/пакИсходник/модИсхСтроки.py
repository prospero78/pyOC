# coding: utf8
"""
Модуль предоставляет тип для хранения строк исходника.
"""
class тИсхСтроки:
	def __init__(сам, root, исх):
		def НаСтроки_Разбить():
			"""
			Берёт исходный тест и разбивает на строки
			"""
			лит = ""
			строка = ""
			for лит in сам.__исх:
				if лит != '\n':
					строка += лит
				else:
					сам.__строки[сам.__стр_всего] = строка
					сам.__стр_всего += 1
					строка = ""
		
		сам.__root = root
		
		assert type(исх)==str, "тИсхСтроки.__init__(), тип исходника не строка, type(исх)="+type(исх)
		сам.__исх = исх
		
		сам.__строки = {}
		сам.__стр_всего=1
		
		НаСтроки_Разбить()
		
		#сам.ПоСтр_Печать()
	
	def ПоСтр_Печать(сам):
		цСчётчик = 1
		while цСчётчик < сам.__стр_всего:
			стрНомерСтроки = str(цСчётчик)
			while len(стрНомерСтроки) < 2:
				стрНомерСтроки = "0" + стрНомерСтроки
			сам.__root.конс.Исх_Печать(стрНомерСтроки + " " + сам.__строки[цСчётчик])
			цСчётчик += 1
		
	def __call__(сам, пцНомер):
		бУсловие = type(пцНомер) == int
		стрСообщ = "тИсхСтроки.__call__(), тип номера строки не целое, type(пцНомер)=" + type(пцНомер)
		assert бУсловие, стрСообщ
		return сам.__строки[пцНомер]
		
	@property
	def всего(сам):
		return len(сам.__строки)
