"""
Модуль предоставляет тип Исходника.
Производит первоначальное чтение, разбивает на типовые цепочки литер,
отбрасывает мусор
"""

if True:
   from .модКоординаты import тКоорд
   from .модКоордИсх import тКоордИсх
   from .модИсхСтроки import тИсхСтроки
   from .модИсхТекст import тИсхТекст
   from пакКомпилер.пакТег import тТег
   from пакКомпилер.пакМодуль import тМодуль

class тИсходник:
   def __init__(self, root, имя_файла):
      self.__root = root
      self.конс = root.конс 
      
      усл = type(имя_файла) == str
      _текст = "тИсходник.__init__(): имя_файла должно быть строкой, type(имя_файла)="+str(усл)
      self.конс.Контроль(усл, _текст)
      
      усл = имя_файла != ""
      _текст = "тИсходник.__init__(): имя_файла не должно быть пустым"
      self.конс.Контроль(усл, _текст)

      self.__исх = тИсхТекст(root, имя_файла) # хранит текст исходного кода
      self.строки = тИсхСтроки(root, self.__исх())# список строк исходного текста
      self.__теги = {} # список тегов в тексте
      self.__теги_всего = 0 # общее количество тегов
      self.коорд = тКоордИсх(0, 0) # общая позиция в исходном тексте
      self.указ = 0 # бегунок в исходнике
      self.программа = {} # перечень модулей для компиляции
      self.ошибка = root.ошибка

   def Тег_Добав(self, имя):
      """
      Процедура добавляет тег с атрибутами положения в исходном тексте.
      """
      коорд = тКоорд(self.коорд.стр, self.коорд.поз)
      тег = тТег(self.__root, коорд, имя, self.__теги_всего)
      self.__теги[self.__теги_всего] = тег
      self.__теги_всего += 1
      self.коорд.Поз_Доб()

   def НаТеги(self):
      def Пробел(лит):
         if лит in [' ', '\t']:
            self.коорд.Поз_Доб()
      def Запятая(лит):
         if лит ==',':
            self.Тег_Добав(',')
      def ТочкаЗапятая(лит):
         if лит == ';':
            self.Тег_Добав(';')
      def Плюс(лит):
         if лит == '+':
            self.Тег_Добав('+')
      def Минус(лит):
         if лит == '-':
            self.Тег_Добав('-')
      def Деление(лит):
         if лит == '/':
            self.Тег_Добав('/')
      def ЛеваяСкобка(лит):
         if лит == '(':
            if лит + self.__исх.Лит(self.указ+1) != "(*":
               self.Тег_Добав('(')
            else:
               self.Тег_Добав('(*')
               self.коорд.Поз_Доб()
               self.указ += 1
      def ПраваяСкобка(лит):
         if лит == ')':
            self.Тег_Добав(')')
      def НоваяСтрока(лит):
         if лит == '\n':
            self.коорд.Стр_Доб()
            self.коорд.Поз_Сброс()
      def Умножить(лит):
         if лит == '*':
            if лит + self.__исх.Лит(self.указ+1) != "*)":
               self.Тег_Добав('*')
            else:
               self.Тег_Добав('*)')
               self.коорд.Поз_Доб()
               self.указ += 1
      def Двоеточие(лит):
         if лит == ':':
            if лит + self.__исх.Лит(self.указ+1) != ":=":
               self.Тег_Добав(':')
            else:
               self.Тег_Добав(':=')
               self.коорд.Поз_Доб()
               self.указ += 1
      def ПереводКаретки(лит):
         if лит == '\r':
            self.коорд.поз += 1
      def ЕслиСущность(лит):
         """
         Если началось число или имя сущности.
         """
         # если "_" или буква -- то это только имя
         сущн = ""
         if лит=="_" or лит.isalpha():
            while лит.isalpha() or лит.isdigit() or лит=="_":
               сущн += лит
               self.указ += 1
               self.коорд.Поз_Доб()
               лит = self.__исх.Лит(self.указ)
            else:
               # откат на одну позицию
               self.указ -= 1
               self.коорд.поз = self.коорд.поз - len(сущн)
               self.Тег_Добав(сущн)
               self.коорд.поз = self.коорд.поз + len(сущн)-1

         # возможно это число
         elif лит.isdigit():
            while лит.isdigit() or лит == ".":
               сущн += лит
               self.указ += 1
               self.коорд.Поз_Доб()
               лит = self.__исх.Лит(self.указ)
            else:
               # откат на одну позицию
               self.указ -= 1
               self.коорд.поз = self.коорд.поз - len(сущн)
               self.Тег_Добав(сущн)
               self.коорд.поз = self.коорд.поз + len(сущн)-1
      def Равно(лит):
         if лит =='=':
            self.Тег_Добав('=')
      def Точка(лит):
         if лит =='.':
            self.Тег_Добав('.')
      def Кавычка2(лит):
         """
         Вычисляет константные строки.
         """
         if лит == '"':
            стр = '"'
            лит = ""
            while лит !='"':
               self.указ += 1
               self.коорд.Поз_Доб()
               лит = self.__исх.Лит(self.указ)
               стр += лит
            self.Тег_Добав(стр)
            self.коорд.Поз_Доб()

      исх_длина = self.__исх.длина - 1
      while self.указ-1 < исх_длина:
         лит = self.__исх.Лит(self.указ)
         Пробел(лит)
         Запятая(лит)
         ТочкаЗапятая(лит)
         ЛеваяСкобка(лит)
         ПраваяСкобка(лит)
         НоваяСтрока(лит)
         Умножить(лит)
         Двоеточие(лит)
         ПереводКаретки(лит)
         ЕслиСущность(лит)
         Равно(лит)
         Точка(лит)
         Кавычка2(лит)
         Плюс(лит)
         Минус(лит)
         Деление(лит)
         self.указ += 1

   def Теги_Печать(self):
      for keys in self.__теги:
         тег = self.__теги[keys]
         print(тег)

   def КомментарииВыкинуть(self):
      """
      Выкидывать по кругу комментарии, пока не будут выкинуты полностью.
      """
      def КомментарийВыкинуть():
         """
         Нагло выкидывает комментарий из тегов.
         Должен контролировать непарное открытие и закрытие комментариев.
         """
         коммент_есть = False
         номер_тега = 0
         номер_чистого_тега = 0
         теги = {} # чистый список тегов
         уровень = 0 # уровен вложенных комментариев
         while номер_тега < len(self.__теги):
            тег = self.__теги[номер_тега]
            if тег.имя=="(*": # начался пропуск тегов
               уровень += 1
               коммент_есть = True
            elif тег.имя=="*)":
               уровень -= 1

            if уровень == 0 and тег.имя != "*)":
               тег._Номер_Уст(номер_чистого_тега)
               теги[номер_чистого_тега]=тег
               номер_чистого_тега += 1

            номер_тега += 1
         # проверка на сбалансированность уровня вложения
         assert уровень == 0, "Открытие и закрытие комментариев в модуле не сбалансировано, уровень="+str(уровень)
         self.__теги = теги
         return коммент_есть
      while КомментарийВыкинуть():
         pass

   def Модуль_Обработать(self):
      модуль = тМодуль(self.__root, self.__теги)
      self.программа[0] = модуль
      модуль.Обработать()

   def Обработать(self):
      #self.строки.ПоСтр_Печать()
      self.НаТеги()
      #print('===Грязные теги===')
      #self.Теги_Печать()
      self.КомментарииВыкинуть()
      #print("===Чистые теги===")
      #self.Теги_Печать()
      self.Модуль_Обработать()
