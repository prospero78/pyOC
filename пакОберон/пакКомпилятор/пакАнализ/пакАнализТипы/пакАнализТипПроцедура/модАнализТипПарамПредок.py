# coding: utf8
"""
Модуль анализирует тип группы параметров в процедуре
либо до первого разделителя ";", либо до скобки.
"""

class тАнализТипПарамПредок:
	def __init__(сам, пДанные):
		сам.слова_секции = пДанные['слова']
		сам.тип = "" # Вычисленный тип записи (если массив, то элемент массива)
		сам.бМассив = False # Признак наличия массива
		# 1. Проверяем в порядке следования типов
		сам.__РодТипа_Проверить()
		сам.__Разделитель_Обрезать()

	def __РодТипа_Проверить(сам):
		"""
		Проверяет на род типа. Их может быть несколько.
		1. Встроенный тип
		"""
		слово_тип = сам.слова_секции[0]
		стрТип = слово_тип.Проверить()
		if стрТип == "BOOLEAN":
			сам.тип = "BOOLEAN"
		elif стрТип == "SET":
			сам.тип = "SET"
		elif стрТип == "BYTE":
			сам.тип = "BYTE"
		elif стрТип == "CHAR":
			сам.тип = "CHAR"
		elif стрТип == "INTEGER":
			сам.тип = "INTEGER"
		elif стрТип == "REAL":
			сам.тип = "REAL"

		elif стрТип == "ARRAY":
			сам.бМассив = True

		# остаётся только частнй тип
		elif слово_тип.ЕслиСтр_Допустимо():
			"""
			Гоняем цикл, пока не встретим скобку или разделитель
			"""
			имя_типа = ""
			while слово_тип.строка != ";" or слово_тип.строка != ")":
				имя_типа + слово_тип.строка
				сам.СловоСекции_Обрезать()
				слово_тип = сам.слова_секции[0]
				стрТип = слово_тип.Проверить()
				if слово_тип.ЕслиСтр_Допустимо() or стрТип == ".":
					pass
				else:
					assert False, "тАнализПарамПредок: нарушение в имени предка параметра" + слово_тип.стрИсх
			сам.тип = имя_типа

	def __Разделитель_Обрезать(сам):
		"""
		Предок параметра может закончиться, как ";"
		так и ")". Поэтому проверим оба варианта.
		"""
		слово_разд = сам.слова_секции[0]
		стрРаздел = слово_разд.Проверить()
		if стрРаздел == ";":
			сам.СтрокиСекции_Обрезать()
		elif стрРаздел == ")":
			pass
		else: # А вот тут уже непонятно что
			assert False, "АнализТипПарамПредок: неизветный символ" + слово_разд.стрИсх
