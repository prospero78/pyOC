# coding: utf8
"""
Модуль анализирует параметры в одной группе паарметров
в заголовке процедуры.
Собирает их в пакет (если следуют вместе).
Обрезает разделитель и на этом всё.
"""

if True:
	from пакОберон.пакКомпилятор.пакСущность.пакОшибка import тОшибка

class тАнализТипПарам:
	def __init__(сам, пОберон, пДанные):

		сам.ош = тОшибка(пОберон, "тАнализТипПарам")

		сам.слова_секции = пДанные['слова']
		сам.бСсылка = False
		сам.параметры = {} # Словарь параметров в группе
		сам.__Ссылка_Получ()
		if сам.ош.бВнутр:
			return
		if сам.ош.бИсх:
			return
		сам.__ИмяПарам_Проверить()
		if сам.ош.бВнутр:
			return
		if сам.ош.бИсх:
			return
		while сам.__Запятая_Обрезать():
			сам.__ИмяПарам_Проверить()
			if сам.ош.бВнутр:
				return
			if сам.ош.бИсх:
				return
		# теперь перечисления точно закончились, должен быть рзделитель
		сам.__Двоеточие_Проверить()
		if сам.ош.бВнутр:
			return
		if сам.ош.бИсх:
			return

	def __Ссылка_Получ(сам):
		"""
		Проверяет идёт ли ссылка первым словом.
		Также первым словом может идти сразу имя параметра.
		Больше ничего быть не может.
		"""
		слово_сыл = сам.слова_секции[0]
		ссылка = слово_сыл.Проверить()
		if ссылка == "VAR":
			сам.СловаСекции_Обрезать()
			сам.бСсылк = True

	def __ИмяПарам_Проверить(сам):
		"""
		Проверяет имя параметра, должно быть простым.
		Поскольку параметров может быть несколько -- каждый
		параметр в группе добавляется под своим номером.
		"""
		слово_имя = сам.слова_секции[0]
		имя = слово_имя.Проверить()
		if слово_имя.ЕслиИмя_Строго():
			номер = len(сам.параметры)
			сам.параметры[номер] = имя
			сам.СловаСекции_Обрезать()

	def __Запятая_Обрезать(сам):
		"""
		Проверяет не следует ли запятая за именем параметра.
		(* Праматров при наличии запятой -- несколько *)
		"""
		бРезульт = False
		слово_запятая = сам.слова_секции[0]
		запятая = слово_запятая.Проверить()
		if запятая == ",":
			сам.СловаСекции_Обрезать()
			бРезульт = True
		return бРезульт

	def __Двоеточие_Проверить(сам):
		"""
		Здесь может быть только ":" (* в конце параметров процедуры *)
		"""
		слово_двоеточ = сам.слова_секции[0]
		строка_двоеточ = слово_двоеточ.Проверить()
		if строка_двоеточ == ":": # есть двоеточие
			сам.СловаСекции_Обрезать()
		else:
			стрОш = "Пропущено \":\"?"+слово_двоеточ.стрИсх
			сам.ош.Исх("__Двоеточие_Проверить()", стрОш)
			return

	def СловаСекции_Обрезать(сам):
		"""
		Уменьшает слова секции на 1 с головы.
		"""
		новый_список = {}
		for ключ in range(1, len(сам.слова_секции)):
			новый_список[ключ-1]=сам.слова_секции[ключ]
		сам.слова_секции = {}
		сам.слова_секции = новый_список

	@property
	def цДлинаПарам(сам):
		return len(сам.параметры)
