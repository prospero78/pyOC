# coding: utf8
"""
Модуль для анализа секции типов -- тип-переменная
"""

if True:
	from пакОберон.пакКомпилятор.пакСущность.пакСлово import тСлово
	from пакОберон.пакКомпилятор.пакСущность.пакРод import тРод

	from .модАнализТипБазовый import тАнализТипБазовый

class тАнализТипПерем(тАнализТипБазовый):
	def __init__(сам, пОберон, пДанные):
		сам.__конс = пОберон.конс

		сам.__бОшВнутр = False
		сам.__бОшИсх = False

		тАнализТипБазовый.__init__(сам, пОберон, пДанные)
		if сам.бОшВнутр_АнализТипБазовый:
			сам.__бОшВнутр = True
			стрОш = "тАнализТипПерем.__init__(): ошибка компилятора. При вызове тАнализТипБазовый"
			сам.__конс.ОшВнутр(стрОш)
			return
		if сам.бОшИсх_АнализТипБазовый:
			сам.__бОшВнутр = True
			стрОш = "тАнализТипПерем.__init__(): ошибка исходника. При вызове тАнализТипБазовый"
			сам.__конс.Ошибка(стрОш)
			return
		сам.Имя_Проверить()
		if сам.бОшИсх_АнализТипБазовый:
			сам.__бОшИсх = True
			стрОш = "тАнализТипПерем.__init__(): ошибка исходника. При работе тАнализТипБазовый"
			сам.__конс.Ошибка(стрОш)
			return
		сам.бЭкспорт_Проверить()
		if сам.бОшИсх_АнализТипБазовый:
			сам.__бОшИсх = True
			стрОш = "тАнализТипПерем.__init__(): ошибка исходника. При работе тАнализТипБазовый"
			сам.__конс.Ошибка(стрОш)
			return
		сам.Определитель_Проверить()
		if сам.бОшИсх_АнализТипБазовый:
			сам.__бОшИсх = True
			стрОш = "тАнализТипПерем.__init__(): ошибка исходника. При работе тАнализТипБазовый"
			сам.__конс.Ошибка(стрОш)
			return
		сам.бУказатель_Проверить()
		if сам.бОшИсх_АнализТипБазовый:
			сам.__бОшИсх = True
			стрОш = "тАнализТипПерем.__init__(): ошибка исходника. При работе тАнализТипБазовый"
			сам.__конс.Ошибка(стрОш)
			return
		сам.Предок_Проверить()
		if сам.бОшИсх_АнализТипБазовый:
			сам.__бОшВнутр = True
			стрОш = "тАнализТипПерем.__init__(): ошибка исходника. При работе тАнализТипБазовый"
			сам.__конс.Ошибка(стрОш)
			return
		# Здесь нет END, сразу за типом ";"
		сам.Разделитель_Обрезать()

	@property
	def бОшВнутр(сам):
		return сам.__бОшВнутр

	@property
	def бОшИсх(сам):
		return сам.__бОшИсх
