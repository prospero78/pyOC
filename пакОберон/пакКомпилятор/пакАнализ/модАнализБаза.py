# coding:utf8
"""
Модуль базового типа для анализа секции для всех секций
"""

if True:
	from пакОберон.пакКомпилятор.пакСущность.пакСлово import тСлово
	from пакОберон.пакКомпилятор.пакСущность.пакОшибка import тОшибка

class тАнализБаза:
	def __init__(сам, пОберон, пДанные:dict)->None:
		def Анализ_Проверить()->bool:
			if пДанные['анализ'] != "анализ":
				сам.__бОшВнутр = True
				стрОш :str= "тАнализБаза.__init__(): ошибка компилятора. В секцию  должен передаваться словарь слов для анализа"
				сам.__конс.ОшВнутр(стрОш)
				return
			return False

		сам.__конс = пОберон.конс

		сам.ошб = тОшибка(пОберон, "тАнализБаза")

		if Анализ_Проверить():
			return
		сам.__секция = пДанные['анализ']
		сам.слова_секции = пДанные['слова']
		сам.слова_модуля :dict={}

	def СловаСекции_Обрезать(сам)->None:
		"""
		Уменьшает слова секции на 1 с головы.
		"""
		новый_список :dict= {}
		for ключ in range(1, len(сам.слова_секции)):
			новый_список[ключ-1]=сам.слова_секции[ключ]
		сам.слова_секции :dict= {}
		сам.слова_секции :dict= новый_список

	def СловаМодуля_Печать(сам)->None:
		"""
		Печатает все слова, оставшиеся модулю
		"""
		сам.__конс.Печать("тАнализБаза: Слова модуля в секции"+str(сам.__секция))
		for ключ in сам.слова_модуля:
			слово :тСлово= сам.слова_модуля[ключ]
			сам.__конс.Печать(слово)

	def СловаСекции_Печать(сам)->None:
		"""
		Печатает все слова, доставшиеся импорту
		"""
		сам.__конс.Печать("тАнализБаза: Слова секции в секции" + сам.__секция)
		for ключ in сам.слова_секции:
			слово :тСлово= сам.слова_секции[ключ]
			сам.__конс.Печать(слово)

	@property
	def цСловаМодуля(сам)->int:
		return len(сам.слова_модуля)

	@property
	def цСловаСекции(сам)->int:
		return len(сам.слова_секции)

	def Конец_Уст(сам, пСлово:тСлово)->None:
		"""
		Принудительно ограничивает присвоение слова конца секции.
		Можно сделать только один раз.
		"""
		if пСлово == None:
			сртСообщ = "Слово_конец уже установлено" + сам.__слово_конец.стрИсх
			сам.ошб.Внутр("Конец_Уст()", стрСообщ)
			return
		if type(пСлово) != тСлово:
			стрСообщ = "пСлово должно быть тСлово, type="+str(type(пСлово))
			сам.ошб.Внутр("Конец_Уст()", стрСообщ)
			return
		сам.__слово_конец :тСлово= пСлово
		return

	@property
	def слово_конец(сам)->тСлово:
		return сам.__слово_конец
