# coding:utf8
"""
Содержит тип для разбора констант.
"""

if True:
	from пакОберон.пакКомпилятор.пакСущность.пакСлово import тСлово
	from пакОберон.пакКомпилятор.пакСущность.пакКонстанта import тКонстанта

class тКонстПоле:
	def __init__(сам, пОберон, пДанные):
		сам.__оберон = пОберон
		сам.__конс = пОберон.конс
		if пДанные['секция'] != "CONST":
			стрСообщ = "тКонстПоле.__init__(): использование типа не в своей секции, секцйия=" + пДанные['секция']
			сам.__конс.ОшВнутр(стрСообщ)
			return False
		сам.слова_секции : dict = пДанные['слова']
		сам.__имя : str = "" # имя константы
		сам.__имя_слово : тСлово = None
		сам.__бЭкспорт : bool = False
		сам.__бЭкспорт_слово : тСлово = None
		сам.__выраж :dict = {} # Выражение для вычисления константы

		if сам.__Имя_Проверить():
			сам.__конс.ОшВнутр("тКонстПоле.__init__(): ошибка при проверке имени константы")
			return False
		if сам.__Экспорт_Проверить():
			сам.__конс.ОшВнутр("тКонстПоле.__init__(): ошибка при проверке экспорта")
			return False
		сам.__Проверить_Равно()
		сам.__Выраж_Заполнить()

		парам = {}
		парам['слово']     = сам.__имя_слово
		парам['бЭкспорт']  = сам.__бЭкспорт
		парам['выраж']     = сам.__выраж
		парам['модуль_имя']= пДанные['модуль_имя']
		сам.__конст = тКонстанта(пОберон, парам)

	def __Имя_Проверить(сам)->bool:
		"""
		Выясняет правильность имени константы.
		"""
		слово_имя = сам.слова_секции[0]
		имя = слово_имя.Проверить()
		if type(сам.__имя) == None:
			стрСообщ = "тКонстПоле: имя константы уже присвоено" + сам.__имя.стрИсх
			сам.__конс.ОшВнутр(стрСообщ)
			return True
		if слово_имя.ЕслиИмя_Строго():
			сам.__имя = имя
			сам.__имя_слово = слово_имя
			сам.__СловаСекции_Обрезать()
			return False
		else:
			if not слово_имя.ЕслиИмя():
				стрСообщ = "тКонстПоле: имя поля должно быть допустимым именем" + слово_имя.стрИсх
				сам.__конс.Ошибка(стрСообщ)

	def __Экспорт_Проверить(сам)->bool:
		"""
		Проверяет является ли константа экспортируемой.
		"""
		слово_экспорт = сам.слова_секции[0]
		строка_экспорт = слово_экспорт.Проверить()
		if type(сам.__бЭкспорт_слово) == None:
			стрСообщ = "тКонстПоле: экспорт уже присвоен"+сам.__бЭкспорт_слово.стрИсх
			сам.__конс.ОшВнутр(стрМообщ)
			return True
		if слово_экспорт.род == тСлово.кУмножить: # есть экспорт
			сам.__бЭкспорт = True
			сам.__бЭкспорт_слово = слово_экспорт
			сам.__СловаСекции_Обрезать()
			return False
		elif слово_экспорт.род == тСлово.кРавно:
			return False # это определение константы, дальше присвоение
		else:
			сам.__конс.Ошибка("тКонстПоле: Символ экспорта допустим '*' или '='" + слово_экспорт.стрИсх)

	def __Проверить_Равно(сам):
		"""
		Проверяет литеру равно в константах.
		"""
		слово_равно = сам.слова_секции[0]
		строка_равно = слово_равно.Проверить()
		if слово_равно.род == тСлово.кРавно: # есть уравнивание
			сам.__СловаСекции_Обрезать()
		else:
			сам.__конс.Ошибка("тКонстПоле: Литера приравнивания должен быть '='" + слово_равно.стрИсх)

	def __Выраж_Заполнить(сам):
		"""
		Пока не встретится ";" -- заполнять выражение
		"""
		слово_равно = сам.слова_секции[0]
		строка_равно = слово_равно.Проверить()
		while not (слово_равно.род == тСлово.кТочкаЗапятая):
			сам.__СловаСекции_Обрезать()
			сам.__выраж[len(сам.__выраж)] = слово_равно
			слово_равно = сам.слова_секции[0]
			строка_равно = слово_равно.Проверить()
		сам.__СловаСекции_Обрезать() # Откидываем завершающий разделитель

	def __СловаСекции_Обрезать(сам):
		"""
		Уменьшает слова секции на 1 с головы.
		"""
		новый_список = {}
		for ключ in range(1, len(сам.слова_секции)):
			новый_список[ключ-1]=сам.слова_секции[ключ]
		сам.слова_секции = {}
		сам.слова_секции = новый_список

	def Паспорт_Печать(сам):
		"""
		Печает паспорт константы со всеми атрибутами
		"""
		сам.__конс.Отладить("\n+ Константа: "+сам.__имя)
		if сам.__бЭкспорт:
			сам.__конс.Отладить("|   бЭкспорт=", сам.__бЭкспорт)
		if len(сам.__выраж) > 0:
			строка = ""
			for ключ in сам.__выраж:
				строка += " " +сам.__выраж[ключ].строка
			сам.__конс.Отладить("|   Выраж ="+строка)
		сам.__конс.Отладить("+"+"-"*35)

	@property
	def имя(сам)->str:
		return сам.__имя

	@property
	def бЭкспорт(сам)->bool:
		return сам.__бЭкспорт

	@property
	def выраж(сам):
		"""
		Возвращает список слов для анализа константы
		"""
		return сам.__выраж

	@property
	def конст(сам):
		return сам.__конст
