# coding: utf8
"""
Модуль предоставляет тип для хранения имени модуля и его алиаса.
"""

if True:
	from пакОберон.пакКомпилятор.пакСущность.пакСлово import тСлово
	from ..модАнализ import тАнализ

class тАнализПроцедуры(тАнализ):
	def __init__(сам, пДанные):
		тАнализ.__init__(сам, пДанные)
		#сам.СловаСекции_Печать()
		сам.__алиас = "" # Алиас модуля
		сам.__алиас_слово = None # тСлово алиаса
		сам.__имя = "" # Настоящее имя модуля
		if сам.__Проверить_Присвоить():     # проверка на наличие алиаса
			сам.__Алиас_Получить()
			сам.__СловаСекции_Обрезать() # литера равно -- признак алиаса
		сам.__Имя_Проверить()  # сложное имя в любом случае алиаса

	def __Алиас_Получить(сам):
		"""
		Выясняет правильность имени модуля.
		"""
		слова_алиас = сам.слова_секции[0]
		алиас = слова_алиас.Проверить()
		if слова_алиас.ЕслиИмя_Строго():
			сам.__алиас = слова_алиас
			сам.__СловаСекции_Обрезать()
		else:
			assert False, "тАнализМодуль: алиас модуля должно быть допустимым именем, имя=" + имя + слова_алиас.стрИсх

	def __Проверить_Присвоить(сам):
		"""
		Проверяет литеру равно в импорте модулей. Может и не быть
		В словаре слов-- это по счёту ВТОРОЕ слово
		"""
		бРезульт = False
		слово_равно = сам.слова_секции[1]
		строка_равно = слово_равно.Проверить()
		if слово_равно.род == тСлово.кПрисвоить: # есть уравнивание
			бРезульт = True
		return бРезульт

	def __Имя_Проверить(сам):
		"""
		Пока не встретится "," или ";" -- заполнять имя алиаса
		"""
		def Имя_Проверить():
			"""
			Проверяет чтобы имя было строгим
			"""
			строка = слово_имя.строка
			бУсл1 = слово_имя.ЕслиИмя_Строго() or (строка == ".")
			бУсл2 = (строка !=",") and (строка !=";")
			return бУсл1 and бУсл2
		слово_имя = сам.слова_секции[0]
		имя = слово_имя.Проверить()
		while Имя_Проверить():
			сам.__СловаСекции_Обрезать()
			сам.__имя += имя
			слово_имя = сам.слова_секции[0]
			имя = слово_имя.Проверить()
		сам.__СловаСекции_Обрезать() # Откидываем завершающий разделитель

	def __СловаСекции_Обрезать(сам):
		"""
		Уменьшает слова секции на 1 с головы.
		"""
		новый_список = {}
		for ключ in range(1, len(сам.слова_секции)):
			новый_список[ключ-1]=сам.слова_секции[ключ]
		сам.слова_секции = {}
		сам.слова_секции = новый_список

	def Паспорт_Печать(сам):
		"""
		Печатает паспорт модуля со всеми атрибутами.
		"""
		print("Паспорт модуля:", сам.__имя)
		if сам.__алиас != "":
			print("   Алиас(", сам.__имя, ")=", сам.__алиас.строка)

	@property
	def алиас(сам):
		return сам.__алиас

	@property
	def имя(сам):
		return сам.__имя

	@property
	def бАлиас(сам):
		бАлиас = False
		if сам.__стрАлиас != "":
			бАлиас = True
		return бАлиас
