# coding: utf8
"""
Модуль предоставляет тип с предком -- встроенный тип
"""
if True:
	from пакОберон.пакКомпилятор.пакСущность.пакРод import тРод
	from .модПолеБаза import тПолеБаза
	from пакОберон.пакКомпилятор.пакСущность.пакОшибка import тОшибка

class тПолеВстроен(тПолеБаза):
	__slots__ = ()
	def __init__(сам, пОберон, пПоле):
		сам.ош = тОшибка(пОберон, "тПолеВстроен")

		тПолеБаза.__init__(сам, пОберон, пПоле)
		if сам.ошб.бВнутр:
			сам.ош.Внутр("__init__()", "При создании предка тПолеБаза")
			return
		if сам.ошб.бИсх:
			сам.ош.Исх("__init__()", "При создании предка тПолеБаза")
			return
		сам.ИмяПоле_Проверить()
		if сам.ошб.бВнутр:
			сам.ош.Внутр("__init__()", "При проверке имени поля")
			return
		if сам.ошб.бИсх:
			сам.ош.Исх("__init__()", "При проверке имени поля")
			return

		сам.бЭкспорт_Проверить()
		if сам.ошб.бВнутр:
			сам.ош.Внутр("__init__()", "При проверке наличия экспорта")
			return
		if сам.ошб.бИсх:
			сам.ош.Исх("__init__()", "При проверке наличия экспорта")
			return

		сам.Определитель_Обрезать()
		if сам.ошб.бВнутр:
			сам.ош.Внутр("__init__()", "При обрезке определителя")
			return
		if сам.ошб.бИсх:
			сам.ош.Исх("__init__()", "При обрезке определителя")
			return

		сам.__ПредокВстроен_Проверить()
		if сам.ошб.бВнутр:
			сам.ош.Внутр("__init__()", "При проверке встроенного предка")
			return
		if сам.ошб.бИсх:
			сам.ош.Исх("__init__()", "При проверке встроенного предка")
			return

		сам.Разделитель_Обрезать()
		if сам.ошб.бВнутр:
			сам.ош.Внутр("__init__()", "При обрезке разделителя")
			return
		if сам.ошб.бИсх:
			сам.ош.Исх("__init__()", "При обрезке разделителя")
			return

	def __ПредокВстроен_Проверить(сам):
		"""
		Проверяет тип встроенного предка
		"""
		слово_тип = сам.слова_секции[0]
		строка_тип = слово_тип.Проверить()
		if not слово_тип.ЕслиСтр_Допустимо():
			стрОш = "Тип поля должен быть разрешённым именем" + слово_тип.стрИсх
			сам.ош.Внутр("__ПредокВстроен_Проверить()", стрОш)
			return
		#assert строка_тип != "END", "тПолеВстроен: тип поля не можеть быть 'END', тип=" + строка_тип
		if строка_тип == "BOOLEAN":
			сам.Предок_Уст("BOOLEAN")
		elif строка_тип == "CHAR":
			сам.Предок_Уст("CHAR")
		elif строка_тип == "INTEGER":
			сам.Предок_Уст("INTEGER")
		elif строка_тип == "REAL":
			сам.Предок_Уст("REAL")
		elif строка_тип == "BYTE":
			ссам.Предок_Уст("BYTE")
		elif строка_тип == "SET":
			сам.Предок_Уст("SET")
		else:
			стрОш = "Неверный встроенный тип" + слово_тип.стрИсх
			сам.ош.Исх("__ПредокВстроен_Проверить()", стрОш)
			return
