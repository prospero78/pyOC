# coding: utf8
"""
Модуль "Компилер".
Содержит в себе все составляющие для компилятора Оберона
"""
if True:
	from .пакСканер import тСканер
	from .пакАнализ import тАнализ
	from .пакРазбор import тРазбор
	from .пакСущность.пакОшибка import тОшибка

class тКомпилер:
	def __init__(сам, пОберон)->None:
		сам.__оберон = пОберон
		сам.__конс = пОберон.конс
		сам.__конс.Отладить("тКомпилер.__init__()")

		сам.ош = тОшибка(пОберон)

	def Выполнить(сам, пФайлИсхИмя:str):
		сам.__конс.Отладить("тКомпилер.Выполнить()")
		if type(пФайлИсхИмя) != str:
			сам.ош.Внутр("тКомпилер.Выполнить()", "пФайлИсхИмя должен иметь тип str, type="+str(type(пФайлИсхИмя)))
			return
		if пФайлИсхИмя == "":
			сам.ош.Внутр("тКомпилер.Выполнить()", "пФайлИсхИмя не может быть пустой строкой")
			return
		сам.__конс.Отладить("тКомпилер.Выполнить(): компилирую \"" + пФайлИсхИмя + "\"")

		сканер = тСканер(сам.__оберон, пФайлИсхИмя)
		if сканер.ош.бВнутр:
			сам.ош.Внутр("тКомпилер.Выполнить()", "При вызове тСканер")
			return
		if сканер.ош.бИсх:
			сам.ош.Исх("тКомпилер.Выполнить()", "При вызове тСканер")
			return

		анализ = тАнализ(сам.__оберон, сканер.Секции_Получить())
		if анализ.ош.бВнутр:
			сам.ош.Внутр("тКомпилер.Выполнить()", "При вызове тАнализ")
			return
		if анализ.ош.бИсх:
			сам.ош.Исх("тКомпилер.Выполнить()", "При работе тАнализ")
			return

		разбор = тРазбор(анализ.данные)
		if разбор.ош.бВнутр:
			сам.ош.Внутр("тКомпилер.Выполнить()", "Ошибка тРазбор")
			return
		if разбор.ош.бИсх:
			сам.ош.Исх("тКомпилер.Выполнить()", "При работе тРазбор")
			return
