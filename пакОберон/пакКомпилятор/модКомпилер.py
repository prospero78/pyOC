# coding: utf8
"""
Модуль "Компилер".
Содержит в себе все составляющие для компилятора Оберона
"""
if True:
	from .пакСканер import тСканер
	from .пакАнализ import тАнализ
	from .пакРазбор import тРазбор

class тКомпилер:
	def __init__(сам, пОберон)->None:
		сам.__оберон = пОберон
		сам.__конс = пОберон.конс
		сам.__конс.Отладить("тКомпилер.__init__()")

	def Выполнить(сам, пФайлИсхИмя:str):
		сам.__конс.Отладить("тКомпилер.Выполнить()")
		if type(пФайлИсхИмя) != str:
			сам.__конс.ОшВнутр("тКомпилер.Выполнить(): ошибка компилятора. пФайлИсхИмя должен иметь тип str, type="+str(type(пФайлИсхИмя)))
			return
		if пФайлИсхИмя == "":
			сам.__конс.ОшВнутр("тКомпилер.Выполнить(): ошибка компилятора. пФайлИсхИмя не может быть пустой строкой")
			return
		сам.__конс.Отладить("тКомпилер.Выполнить(): компилирую \"" + пФайлИсхИмя + "\"")

		сканер = тСканер(сам.__оберон, пФайлИсхИмя)
		if сканер.бОшВнутр:
			сам.__конс.ОшВнутр("тКомпилер.Выполнить(): ошибка компилятора. Ошибка тСканер")
			return
		if сканер.бОшИсх:
			сам.__конс.Ошибка("тКомпилер.Выполнить(): ошибка исходника. При работе тСканер")
			return

		анализ = тАнализ(сам.__оберон, сканер.Секции_Получить())
		if сам.__конс.бОшВнутр:
			сам.__конс.ОшВнутр("тКомпилер.Выполнить(): ошибка компилятора. Ошибка тАнализ")
			return
		if сам.__конс.бОшибка:
			сам.__конс.Ошибка("тКомпилер.Выполнить(): ошибка исходника. При работе тАнализ")
			return

		разбор = тРазбор(анализ.данные)
		if сам.__конс.бОшВнутр:
			сам.__конс.ОшВнутр("тКомпилер.Выполнить(): ошибка компилятора. Ошибка тРазбор")
			return
		if сам.__конс.бОшибка:
			сам.__конс.Ошибка("тКомпилер.Выполнить(): ошибка исходника. При работе тРазбор")
			return
