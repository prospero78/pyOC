# coding: utf8
"""
Предоставляет тип сканера для обработки текста на входе.
Сканер служит для первичного сканирования текста.
Он же проверяет правильность поступления слов из исходного текста.
"""
if True:
	from .пакСканерИсходник import тСканерИсходник
	from .пакСканерМодуль import тСканерМодуль
	from .пакСканерИмпорт import тСканерИмпорт
	from .пакСканерКонстанты import тСканерКонстанты
	from .пакСканерТипы import тСканерТипы
	from .пакСканерПеременные import тСканерПеременные
	from .пакСканерПроцедуры import тСканерПроцедуры

	from typing import Dict as тСловарь # словарь для контроля типов
	from пакОберон.пакКомпилятор.пакСущность.пакСлово import тСлово

class тСканер:
	def __init__(сам, пОберон, пФайлИмяИсх:str) -> None:
		сам.__оберон = пОберон
		сам.__конс = пОберон.конс
		сам.__конс.Отладить("тСканер.__init__()")

		сам.__импорт :dict= {} # тСловарь[]##
		сам.__конст  :dict= {} ##
		сам.__типы   :dict= {} ##   Группа словарей, хранит группы слов по секциям
		сам.__перем  :dict= {} ##    для дальнейшего анализа
		сам.__проц   :dict= {} ##
		сам.__модуль :dict= {} ##
		сам.__модуль_имя :str= "" # Имя модуля в котором производятся операции

		if type(пФайлИмяИсх) != str:
			стрОш = "тСканер.__init__(): ошибка компилятора. пФайлИсх должен быть str, type="+str(type(пФайлИмяИсх))
			сам.__конс.ОшВнутр(стрОш)

		if пФайлИмяИсх =="":
			пФайлИмяИсх = "Hello.o7"
		исх    = тСканерИсходник(пОберон, пФайлИмяИсх)
		if исх.бОшВнутр:
			сам.__конс.ОшВнутр("тСканер.__init__(): ошибка компилятора. При вызове тСканерИсходник")
			return
		if сам.исх.бОшибка:
			сам.__конс.Ошибка("тСканер.__init__(): ошибка исходника. При вызове тСканерИсходник")
			return
		модуль = тСканерМодуль(пОберон, исх.Парам_Получ())
		if сам.__конс.бОшВнутр:
			сам.__конс.ОшВнутр("тСканер.__init__(): ошибка компилятора. При вызове тСканерМодуль")
			return
		if сам.__конс.бОшибка:
			сам.__конс.Ошибка("тСканер.__init__(): ошибка исходника. При вызове тСканерМодуль")
			return
		сам.__модуль_имя = модуль.имя

		парам = модуль.Парам_Получ()
		парам['секция'] = "IMPORT"
		импорт = тСканерИмпорт(пОберон, парам)
		if сам.__конс.бОшВнутр:
			сам.__конс.ОшВнутр("тСканер.__init__(): ошибка компилятора. При вызове тСканерИмпорт")
			return
		if сам.__конс.бОшибка:
			сам.__конс.Ошибка("тСканер.__init__(): ошибка исходника. При вызове тСканерИмпорт")
			return
		сам.__импорт = импорт.слова_секции
		сам.слова_модуля :dict= {}
		сам.слова_модуля = импорт.слова_модуля

		парам = импорт.Парам_Получ()
		парам['секция'] = "CONST"
		парам['модуль_имя'] = модуль.имя
		конст = тСканерКонстанты(пОберон, парам)
		if сам.__конс.бОшВнутр:
			сам.__конс.ОшВнутр("тСканер.__init__(): ошибка компилятора. При вызове тСканерКонстанты")
			return
		if сам.__конс.бОшибка:
			сам.__конс.Ошибка("тСканер.__init__(): ошибка исходника. При вызове тСканерКонстанты")
			return
		сам.__конст = конст.слова_секции
		сам.слова_модуля = {}
		сам.слова_модуля = конст.слова_модуля

		парам = конст.Парам_Получ()
		парам['секция'] = "TYPE"
		типы = тСканерТипы(пОберон, парам)
		if сам.__конс.бОшВнутр:
			сам.__конс.ОшВнутр("тСканер.__init__(): ошибка компилятора. При вызове тСканерТипы")
			return
		if сам.__конс.бОшибка:
			сам.__конс.Ошибка("тСканер.__init__(): ошибка исходника. При вызове тСканерТипы")
			return
		сам.__типы = типы.слова_секции
		сам.слова_модуля = {}
		сам.слова_модуля = типы.слова_модуля

		парам = типы.Парам_Получ()
		парам['секция'] = "VAR"
		перем = тСканерПеременные(пОберон, парам)
		if сам.__конс.бОшВнутр:
			сам.__конс.ОшВнутр("тСканер.__init__(): ошибка компилятора. При вызове тСканерПеременные")
			return
		if сам.__конс.бОшибка:
			сам.__конс.Ошибка("тСканер.__init__(): ошибка исходника. При вызове тСканерПеременные")
			return
		сам.__перем = перем.слова_секции
		сам.слова_модуля = {}
		сам.слова_модуля = перем.слова_модуля

		парам = перем.Парам_Получ()
		парам['секция'] = "PROCEDURE"
		процедуры =тСканерПроцедуры(пОберон, парам)
		if сам.__конс.бОшВнутр:
			сам.__конс.ОшВнутр("тСканер.__init__(): ошибка компилятора. При вызове тСканерПроцедуры")
			return
		if сам.__конс.бОшибка:
			сам.__конс.Ошибка("тСканер.__init__(): ошибка исходника. При вызове тСканерПроцедуры")
			return
		сам.__проц = процедуры.слова_секции
		сам.слова_модуля = {}
		сам.слова_модуля = процедуры.слова_секции

		сам.__модуль = процедуры.слова_модуля

	def Секции_Получить(сам) -> dict:
		парам = {}
		парам['импорт']    = сам.__импорт
		парам['константы'] = сам.__конст
		парам['типы']      = сам.__типы
		парам['переменные']= сам.__перем
		парам['процедуры'] = сам.__проц
		парам['модуль']    = сам.__модуль
		парам['анализ']    = "анализ" #type:ignore
		парам['модуль_имя']= сам.__модуль_имя #type:ignore
		return парам
