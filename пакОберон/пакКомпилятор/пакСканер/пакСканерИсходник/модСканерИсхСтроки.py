# coding: utf8
"""
Модуль предоставляет тип для хранения строк исходника.
"""
class тСканерИсхСтроки:
	def __init__(сам, пОберон, пИсхКод:str)->None:
		def НаСтроки_Разбить()->None:
			"""
			Берёт исходный тест и разбивает на строки
			"""
			лит :str= ""
			строка :str= ""
			for лит in сам.__исх:
				if лит == '\n':
					сам.__строки[сам.__стр_всего] = строка
					сам.__стр_всего += 1
					строка = ""
				else:
					строка += лит

		сам.__оберон = пОберон
		сам.__конс = пОберон.конс
		сам.__конс.Отладить("тСканерИсхСтроки.__init__()")

		сам.__бОшВнутр = False

		if type(пИсхКод) != str:
			стрСообщ = "тСканерИсхСтроки.__init__(): ошибка компилятора. Тип пИсхКод не str, type=" + str(type(пИсхКод))
			сам.__бОшВнутр = True
			сам.__конс.ОшВнутр(стрСообщ)
			return

		if пИсхКод == "":
			стрСообщ = "тСканерИсхСтроки.__init__() ошибка компилятора. пИсхКод не может быть пустой строкой"
			сам.__бОшВнутр = True
			сам.__конс.ОшВнутр(стрСообщ)
			return

		сам.__исх :str= пИсхКод

		сам.__строки :dict= {}
		сам.__стр_всего :int =1

		НаСтроки_Разбить()

	def ПоСтр_Печать(сам)->None:
		цСчётчик :int = 1
		while цСчётчик < сам.__стр_всего:
			стрНомерСтроки :str = str(цСчётчик)
			while len(стрНомерСтроки) < 2:
				стрНомерСтроки = "0" + стрНомерСтроки
			сам.__конс.Отладить(стрНомерСтроки + " " + сам.__строки[цСчётчик])
			цСчётчик += 1

	def __call__(сам, пцНомер:int)->str:
		if type(пцНомер) != int:
			стрСообщ :str = "тСканерИсхСтроки.__call__(): ошибка компилятора. Тип пцНомер строки не целое, type=" + str(type(пцНомер))
			сам.__конс.ОшВнутр(стрСообщ)
			return ""

		if пцНомер <= 0:
			стрСообщ :str = "тСканерИсхСтроки.__call__(): ошибка компилятора. пцНомер строки не может быть меньше 1"
			сам.__бОшВнутр = True
			сам.__конс.ОшВнутр(стрСообщ)
			return ""

		return сам.__строки[пцНомер]

	@property
	def бОшВнутр(сам):
		return сам.__бОшВнутр

	@property
	def всего(сам)->int:
		return len(сам.__строки)
