# coding: utf8
"""
Обеспечивает хранение исходного текста и его обработку.
"""

#from numba import jit #type:ignore

class тСканерИсхТекст:
	def __init__(сам, пОберон, пИмяФайла:str) -> None:
		def Исх_Загрузить():
			if type(пИмяФайла) != str:
				стрОш = "тСканерИсхТекст.__init__(): ошибка компилятора. пИмяФайла должно быть строкой, type(пИмяФайла)=" + str(type(пИмяФайла))
				сам.__конс.ОшВнутр(стрОш)
				сам.__бОшВнутр = True
				return

			if пИмяФайла == "":
				стрОш = "тСканерИсхТекст.__init__(): ошибка компилятора. пИмяФайла не должно быть пустым"
				сам.__конс.ОшВнутр(стрОш)
				сам.__бОшВнутр = True
				return

			try:
				файл = open(сам.__стрИмя_файла,'r', encoding='utf-8')
				сам.__стрИсх :str= файл.read()
				сам.__стрИсх = сам.__стрИсх.replace("\t", "   ")
				файл.close()
			except:
				стрОш :str= "тСканерИсхТекст.__init__(): внешняя ошибка. Не могу загрузить файл " + сам.__стрИмя_файла
				сам.__конс.ОшВнутр(стрОш)
				сам.__бОшВнутр = True

		сам.__оберон = пОберон
		сам.__конс = пОберон.конс
		сам.__конс.Отладить("тСканерИсхТекст.__init__()")

		сам.__бОшВнутр = False
		сам.__бОшИсх = False

		сам.__стрИсх = ""
		сам.__стрИмя_файла = пИмяФайла

		Исх_Загрузить()
		if сам.__бОшВнутр:
			сам.__конс.ОшВнутр("тСканерИсхТекст.__init__(): ошибка компилятора. При загрузке файла")
			return
		if len(сам.__стрИсх) < 10:
			стрОш = "тСканерИсхТекст.__init__(): ошибка исходника. Длина текста меньше 10 литер"
			сам.__бОшИсх = True
			сам.__конс.Ошибка(стрОш+"\n\""+сам.__стрИсх+"\"")
			return

	@property
	def бОшВнутр(сам)->bool:
		return сам.__бОшВнутр

	@property
	def бОшИсх(сам)->bool:
		return сам.__бОшИсх

	#@jit
	def Лит(сам, цПоз:int) -> str:
		"""
		Возвращает позицию литеры в строке
		"""
		if type(цПоз) !=int:
			стрОш = "тСканерИсхТекст.Лит(): ошибка компилятора. цПоз должен быть Int, type="+str(type(цПоз))
			сам.__бОшВнутр = True
			сам.__конс.ОшВнутр(стрОш)
			return ""
		if цПоз < 0:
			стрОш = "тСканерИсхТекст.Лит(): ошибка компилятора. цПоз должен быть больше 0"
			сам.__бОшВнутр = True
			сам.__конс.ОшВнутр(стрОш)
			return ""
		return сам.__стрИсх[цПоз]

	@property
	def стрИсх(сам) -> str:
		return сам.__стрИсх

	@property
	def длина(сам) -> int:
		"""
		Возвращает число литер в исходнике
		"""
		return len(сам.__стрИсх)
